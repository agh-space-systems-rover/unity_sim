<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SocketCANSharp</name>
    </assembly>
    <members>
        <member name="T:SocketCANSharp.AbstractSockAddrCan">
            <summary>
            Represents the base class for all SocketCAN address structures.
            </summary>
        </member>
        <member name="P:SocketCANSharp.AbstractSockAddrCan.CanFamily">
            <summary>
            Address Family.
            </summary>
        </member>
        <member name="P:SocketCANSharp.AbstractSockAddrCan.CanIfIndex">
            <summary>
            Interface Index.
            </summary>
        </member>
        <member name="M:SocketCANSharp.AbstractSockAddrCan.#ctor">
            <summary>
            Initializes a SocketCAN address structure with default values of zeroes.
            </summary>
        </member>
        <member name="M:SocketCANSharp.AbstractSockAddrCan.#ctor(System.Int32)">
            <summary>
            Initializes a SocketCAN address structure to the AF_CAN address family and the provided interface index value.
            </summary>
            <param name="interfaceIndex">Interface index value</param>
        </member>
        <member name="T:SocketCANSharp.BcmCanFdMessage">
            <summary>
            Broadcast Manager Message for reading and writing to a CAN_BCM socket.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmCanFdMessage.Header">
            <summary>
            Broadcast Manager Message Header.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmCanFdMessage.Frames">
            <summary>
            Sequence of CAN FD frames. 
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmCanFdMessage.#ctor">
            <summary>
            Instantiates a new Broadcast Manager Message with default values including setting the CAN_FD_FRAME flag in the header.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmCanFdMessage.#ctor(SocketCANSharp.BcmMessageHeader)">
            <summary>
            Instantiates a new Broadcast Manager Message using the supplied header. The CAN_FD_FRAME flag is also set in the header if it is not already set.
            </summary>
            <param name="header">Message Header</param>
        </member>
        <member name="M:SocketCANSharp.BcmCanFdMessage.#ctor(SocketCANSharp.BcmMessageHeader,SocketCANSharp.CanFdFrame[])">
            <summary>
            Instantiates a new Broadcast Manager Message using the supplied header and sequence of CAN FD frames. In addition, the CAN_FD_FRAME flag is set in the header.
            </summary>
            <param name="header">Message Header</param>
            <param name="frames">Sequence of CAN FD frames</param>
        </member>
        <member name="T:SocketCANSharp.BcmCanFdMessage32">
            <summary>
            Broadcast Manager Message for reading and writing to a CAN_BCM socket. Variant for 32-bit.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmCanFdMessage32.Header">
            <summary>
            Broadcast Manager Message Header.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmCanFdMessage32.Frames">
            <summary>
            Sequence of CAN FD frames. 
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmCanFdMessage32.#ctor">
            <summary>
            Instantiates a new Broadcast Manager Message with default values including setting the CAN_FD_FRAME flag in the header.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmCanFdMessage32.#ctor(SocketCANSharp.BcmMessageHeader32)">
            <summary>
            Instantiates a new Broadcast Manager Message using the supplied header. The CAN_FD_FRAME flag is also set in the header if it is not already set.
            </summary>
            <param name="header">Message Header</param>
        </member>
        <member name="M:SocketCANSharp.BcmCanFdMessage32.#ctor(SocketCANSharp.BcmMessageHeader32,SocketCANSharp.CanFdFrame[])">
            <summary>
            Instantiates a new Broadcast Manager Message using the supplied header and sequence of CAN FD frames. In addition, the CAN_FD_FRAME flag is set in the header.
            </summary>
            <param name="header">Message Header</param>
            <param name="frames">Sequence of CAN FD frames</param>
        </member>
        <member name="T:SocketCANSharp.BcmCanFdSingleMessage">
            <summary>
            A shorthand trivial (single CAN FD frame) Broadcast Manager Message to use when writing to a CAN_BCM socket with a TX_SEND opcode message.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmCanFdSingleMessage.Header">
            <summary>
            Broadcast Manager Message Header.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmCanFdSingleMessage.Frame">
            <summary>
            CAN FD frame to send.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmCanFdSingleMessage.#ctor(SocketCANSharp.BcmMessageHeader,SocketCANSharp.CanFdFrame)">
            <summary>
            Instantiates a new Broadcast Manager Message using the supplied header and CAN FD frame.
            </summary>
            <param name="header">Message Header</param>
            <param name="frame">CAN FD Frame</param>
        </member>
        <member name="T:SocketCANSharp.BcmCanFdSingleMessage32">
            <summary>
            A shorthand trivial (single CAN FD frame) Broadcast Manager Message to use when writing to a CAN_BCM socket with a TX_SEND opcode message. Variant for 32-bit.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmCanFdSingleMessage32.Header">
            <summary>
            Broadcast Manager Message Header.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmCanFdSingleMessage32.Frame">
            <summary>
            CAN FD frame to send.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmCanFdSingleMessage32.#ctor(SocketCANSharp.BcmMessageHeader32,SocketCANSharp.CanFdFrame)">
            <summary>
            Instantiates a new Broadcast Manager Message using the supplied header and CAN FD frame.
            </summary>
            <param name="header">Message Header</param>
            <param name="frame">CAN FD Frame</param>
        </member>
        <member name="T:SocketCANSharp.BcmCanMessage">
            <summary>
            Broadcast Manager Message for reading and writing to a CAN_BCM socket.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmCanMessage.Header">
            <summary>
            Broadcast Manager Message Header.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmCanMessage.Frames">
            <summary>
            Sequence of CAN frames. 
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmCanMessage.#ctor">
            <summary>
            Instantiates a new Broadcast Manager Message with default values.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmCanMessage.#ctor(SocketCANSharp.BcmMessageHeader)">
            <summary>
            Instantiates a new Broadcast Manager Message using the supplied header.
            </summary>
            <param name="header">Message Header</param>
        </member>
        <member name="M:SocketCANSharp.BcmCanMessage.#ctor(SocketCANSharp.BcmMessageHeader,SocketCANSharp.CanFrame[])">
            <summary>
            Instantiates a new Broadcast Manager Message using the supplied header and sequence of CAN frames.
            </summary>
            <param name="header">Message Header</param>
            <param name="frames">Sequence of CAN frames</param>
        </member>
        <member name="T:SocketCANSharp.BcmCanMessage32">
            <summary>
            Broadcast Manager Message for reading and writing to a CAN_BCM socket. Variant for 32-bit.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmCanMessage32.Header">
            <summary>
            Broadcast Manager Message Header.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmCanMessage32.Frames">
            <summary>
            Sequence of CAN frames. 
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmCanMessage32.#ctor">
            <summary>
            Instantiates a new Broadcast Manager Message with default values.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmCanMessage32.#ctor(SocketCANSharp.BcmMessageHeader32)">
            <summary>
            Instantiates a new Broadcast Manager Message using the supplied header.
            </summary>
            <param name="header">Message Header</param>
        </member>
        <member name="M:SocketCANSharp.BcmCanMessage32.#ctor(SocketCANSharp.BcmMessageHeader32,SocketCANSharp.CanFrame[])">
            <summary>
            Instantiates a new Broadcast Manager Message using the supplied header and sequence of CAN frames.
            </summary>
            <param name="header">Message Header</param>
            <param name="frames">Sequence of CAN frames</param>
        </member>
        <member name="T:SocketCANSharp.BcmCanSingleMessage">
            <summary>
            A shorthand trivial (single CAN frame) Broadcast Manager Message to use when writing to a CAN_BCM socket with a TX_SEND opcode message.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmCanSingleMessage.Header">
            <summary>
            Broadcast Manager Message Header.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmCanSingleMessage.Frame">
            <summary>
            CAN frame to send.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmCanSingleMessage.#ctor(SocketCANSharp.BcmMessageHeader,SocketCANSharp.CanFrame)">
            <summary>
            Instantiates a new Broadcast Manager Message using the supplied header and CAN frame.
            </summary>
            <param name="header">Message Header</param>
            <param name="frame">CAN Frame</param>
        </member>
        <member name="T:SocketCANSharp.BcmCanSingleMessage32">
            <summary>
            A shorthand trivial (single CAN frame) Broadcast Manager Message to use when writing to a CAN_BCM socket with a TX_SEND opcode message. Variant for 32-bit.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmCanSingleMessage32.Header">
            <summary>
            Broadcast Manager Message Header.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmCanSingleMessage32.Frame">
            <summary>
            CAN frame to send.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmCanSingleMessage32.#ctor(SocketCANSharp.BcmMessageHeader32,SocketCANSharp.CanFrame)">
            <summary>
            Instantiates a new Broadcast Manager Message using the supplied header and CAN frame.
            </summary>
            <param name="header">Message Header</param>
            <param name="frame">CAN Frame</param>
        </member>
        <member name="T:SocketCANSharp.BcmGenericMessage">
            <summary>
            Generic Broadcast Manager Message for reading from and writing to a CAN_BCM socket. Can support both CAN and CAN FD messages.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmGenericMessage.Header">
            <summary>
            Broadcast Manager Message Header.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmGenericMessage.Frames">
            <summary>
            Sequence of frames in raw byte array format.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmGenericMessage.#ctor">
            <summary>
            Instantiates a new Generic Broadcast Manager Message with default values.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmGenericMessage.#ctor(SocketCANSharp.BcmMessageHeader)">
            <summary>
            Instantiates a new Generic Broadcast Manager Message using the supplied header.
            </summary>
            <param name="header">Message Header</param>
        </member>
        <member name="M:SocketCANSharp.BcmGenericMessage.GetClassicFrames">
            <summary>
            Converts the Frame data byte array to a CanFrame array.
            </summary>
            <returns>CanFrame array derived from the raw byte array.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when invoked on a Message with the CAN_FD_FRAME flag set.</exception>
        </member>
        <member name="M:SocketCANSharp.BcmGenericMessage.GetFdFrames">
            <summary>
            Converts the Frame data byte array to a CanFdFrame array.
            </summary>
            <returns>CanFdFrame array derived from the raw byte array.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when invoked on a Message that does not have the CAN_FD_FRAME flag set.</exception>
        </member>
        <member name="T:SocketCANSharp.BcmGenericMessage32">
            <summary>
            Generic Broadcast Manager Message for reading from and writing to a CAN_BCM socket. Can support both CAN and CAN FD messages. Variant for 32-bit.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmGenericMessage32.Header">
            <summary>
            Broadcast Manager Message Header.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmGenericMessage32.Frames">
            <summary>
            Sequence of frames in raw byte array format. 
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmGenericMessage32.#ctor">
            <summary>
            Instantiates a new Generic Broadcast Manager Message with default values.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmGenericMessage32.#ctor(SocketCANSharp.BcmMessageHeader32)">
            <summary>
            Instantiates a new Generic Broadcast Manager Message using the supplied header.
            </summary>
            <param name="header">Message Header</param>
        </member>
        <member name="M:SocketCANSharp.BcmGenericMessage32.GetClassicFrames">
            <summary>
            Converts the Frame data byte array to a CanFrame array.
            </summary>
            <returns>CanFrame array derived from the raw byte array.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when invoked on a Message with the CAN_FD_FRAME flag set.</exception>
        </member>
        <member name="M:SocketCANSharp.BcmGenericMessage32.GetFdFrames">
            <summary>
            Converts the Frame data byte array to a CanFdFrame array.
            </summary>
            <returns>CanFdFrame array derived from the raw byte array.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when invoked on a Message that does not have the CAN_FD_FRAME flag set.</exception>
        </member>
        <member name="T:SocketCANSharp.BcmMessageHeader">
            <summary>
            Broadcast Manager Message Header which contains the main properties of a message to be written to or read from a CAN_BCM socket.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmMessageHeader.Opcode">
            <summary>
            Command to send to CAN_BCM socket.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmMessageHeader.Flags">
            <summary>
            Flags that add additional behavior modifications to a BCM Message.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmMessageHeader.Interval1Count">
            <summary>
            TX_SETUP: Number of times to send CAN Frame sequence at Interval1. If this value is zero, the value of Interval1 has no role and does not need to be specified.
            RX_SETUP: No function.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmMessageHeader.Interval1">
            <summary>
            TX_SETUP: Interval to send the first 'Interval1Count' CAN frame sequence at.
            RX_SETUP: Specifies the timeout for receiving CAN Frames.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmMessageHeader.Interval2">
            <summary>
            TX_SETUP: Interval to send the CAN frame sequence at. If set to 0, then transmission stops after the first interval count is complete. 
            RX_SETUP: Specifies the minimum interval at which successive RX_CHANGED messages for each CAN ID may be transmitted from the BCM.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmMessageHeader.CanId">
            <summary>
            CAN ID used for various purposes. 
            TX_SETUP / TX_SEND: When TX_CP_CAN_ID flag is set then this value is copied for the CAN ID of every CAN Frame.
            RX_SETUP: When RX_FILTER_ID flag is set then this value is solely used to define a filter.
            TX_DELETE: Removes frames with this CAN ID from the transmission queue.
            TX_READ / RX_READ: Used to extract information from the transmission queue or receive filter for the specified CAN ID.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmMessageHeader.NumberOfFrames">
            <summary>
            The CAN Frame sequence count.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmMessageHeader.#ctor">
            <summary>
            Instantiates a BCM Message Header with the all the defaults.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmMessageHeader.#ctor(SocketCANSharp.BcmOpcode)">
            <summary>
            Instantiates a BCM Message Header with the designated Opcode.
            </summary>
            <param name="opcode">BCM Opcode (command)</param>
        </member>
        <member name="M:SocketCANSharp.BcmMessageHeader.ToString">
            <summary>
            Returns a string that represents the current BcmMessageHeader object.
            </summary>
            <returns>A string that represents the current BcmMessageHeader object.</returns>
        </member>
        <member name="T:SocketCANSharp.BcmMessageHeader32">
            <summary>
            Broadcast Manager Message Header which contains the main properties of a message to be written to or read from a CAN_BCM socket. Variant for 32-bit.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmMessageHeader32.Opcode">
            <summary>
            Command to send to CAN_BCM socket.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmMessageHeader32.Flags">
            <summary>
            Flags that add additional behavior modifications to a BCM Message.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmMessageHeader32.Interval1Count">
            <summary>
            TX_SETUP: Number of times to send CAN Frame sequence at Interval1. If this value is zero, the value of Interval1 has no role and does not need to be specified.
            RX_SETUP: No function.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmMessageHeader32.Interval1">
            <summary>
            TX_SETUP: Interval to send the first 'Interval1Count' CAN frame sequence at.
            RX_SETUP: Specifies the timeout for receiving CAN Frames.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmMessageHeader32.Interval2">
            <summary>
            TX_SETUP: Interval to send the CAN frame sequence at. If set to 0, then transmission stops after the first interval count is complete. 
            RX_SETUP: Specifies the minimum interval at which successive RX_CHANGED messages for each CAN ID may be transmitted from the BCM.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmMessageHeader32.CanId">
            <summary>
            CAN ID used for various purposes. 
            TX_SETUP / TX_SEND: When TX_CP_CAN_ID flag is set then this value is copied for the CAN ID of every CAN Frame.
            RX_SETUP: When RX_FILTER_ID flag is set then this value is solely used to define a filter.
            TX_DELETE: Removes frames with this CAN ID from the transmission queue.
            TX_READ / RX_READ: Used to extract information from the transmission queue or receive filter for the specified CAN ID.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmMessageHeader32.NumberOfFrames">
            <summary>
            The CAN Frame sequence count.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmMessageHeader32.#ctor">
            <summary>
            Instantiates a BCM Message Header with the all the defaults.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmMessageHeader32.#ctor(SocketCANSharp.BcmOpcode)">
            <summary>
            Instantiates a BCM Message Header with the designated Opcode.
            </summary>
            <param name="opcode">BCM Opcode (command)</param>
        </member>
        <member name="M:SocketCANSharp.BcmMessageHeader32.ToString">
            <summary>
            Returns a string that represents the current BcmMessageHeader32 object.
            </summary>
            <returns>A string that represents the current BcmMessageHeader32 object.</returns>
        </member>
        <member name="T:SocketCANSharp.BcmTimeval">
            <summary>
            CAN_BCM specific Time Interval structure.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmTimeval.Seconds">
            <summary>
            Time Interval in seconds.
            </summary>
        </member>
        <member name="P:SocketCANSharp.BcmTimeval.Microseconds">
            <summary>
            Time Interval in microseconds. Used in combination with Seconds to represent the time interval.
            </summary>
        </member>
        <member name="M:SocketCANSharp.BcmTimeval.#ctor(System.Int64,System.Int64)">
            <summary>
            Instantiates a BCM Time Interval structure using the specified Seconds and Microseconds.
            </summary>
            <param name="seconds">Time Interval in seconds</param>
            <param name="microseconds">Time Interval in microseconds</param>
        </member>
        <member name="M:SocketCANSharp.BcmTimeval.ToString">
            <summary>
            Returns a string that represents the current BcmTimeval object.
            </summary>
            <returns>A string that represents the current BcmTimeval object.</returns>
        </member>
        <member name="T:SocketCANSharp.CanFdFrame">
            <summary>
            Represents a CAN FD (Controller Area Network Flexible Data-Rate) Frame
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanFdFrame.CanId">
            <summary>
            Controller Area Network Identifier structure:
            bit 0-28: CAN identifier (11 or 29 bit)
            bit 29: Error frame flag (0 = Data frame, 1 = Error frame)
            bit 30: Remote frame flag (1 = Remote Transmission Request (RTR) bit is set)
            bit 31: Frame format flag (0 = standard 11 bit, 1 = extended 29 bit)
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanFdFrame.Length">
            <summary>
            Frame length in bytes.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanFdFrame.Flags">
            <summary>
            CAN FD specific flags for ESI, BRS, etc.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanFdFrame.Res0">
            <summary>
            Reserved for future expansion.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanFdFrame.Res1">
            <summary>
            Reserved for future expansion.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanFdFrame.Data">
            <summary>
            CAN FD Frame payload.
            </summary>
        </member>
        <member name="M:SocketCANSharp.CanFdFrame.#ctor(System.UInt32,System.Byte[],SocketCANSharp.CanFdFlags)">
            <summary>
            Initializes a new instance of the CanFdFrame structure using the supplied CAN ID, data payload, and flags (ESI, BRS, etc.).
            </summary>
            <param name="canId">CAN ID including remote, error, and SFF/EFF flags.</param>
            <param name="data">Payload data.</param>
            <param name="flags">CAN FD flags.</param>
        </member>
        <member name="M:SocketCANSharp.CanFdFrame.ToString">
            <summary>
            Returns a string that represents the current CanFdFrame object.
            </summary>
            <returns>A string that represents the current CanFdFrame object.</returns>
        </member>
        <member name="T:SocketCANSharp.CanFilter">
            <summary>
            Represents a CAN ID based filter. Filter matches when 'Received CanId' &amp; CanMask == CanId &amp; CanMask.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanFilter.CanId">
            <summary>
            Contains the relevant bits of the CAN ID which are not masked out. Set CAN_INV_FILTER bit to invert the filter.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanFilter.CanMask">
            <summary>
            Contains the CAN ID filter to apply (bit-wise AND) to the CAN ID of incoming CAN Frames. Set CAN_ERR_FLAG to receive Error Frames.
            </summary>
        </member>
        <member name="M:SocketCANSharp.CanFilter.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the CanFilter structure using the specified CAN ID and CAN Mask.
            </summary>
            <param name="canId">The relevants bits of the CAN ID</param>
            <param name="canMask">The CAN ID filter apply</param>
        </member>
        <member name="M:SocketCANSharp.CanFilter.ToString">
            <summary>
            Returns a string that represents the current CanFilter object.
            </summary>
            <returns>A string that represents the current CanFilter object.</returns>
        </member>
        <member name="T:SocketCANSharp.CanFrame">
            <summary>
            Represents a Classical CAN (Controller Area Network) Frame.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanFrame.CanId">
            <summary>
            Controller Area Network Identifier structure:
            bit 0-28: CAN identifier (11 or 29 bit)
            bit 29: Error frame flag (0 = Data frame, 1 = Error frame)
            bit 30: Remote frame flag (1 = Remote Transmission Request (RTR) bit is set)
            bit 31: Frame format flag (0 = standard 11 bit, 1 = extended 29 bit)
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanFrame.Length">
            <summary>
            Frame length in bytes.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanFrame.Pad">
            <summary>
            Padding / Reserved.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanFrame.Res0">
            <summary>
            Padding / Reserved.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanFrame.Len8Dlc">
            <summary>
            Optional DLC value (9-15) at 8 byte payload length. Please note that CAN_CTRLMODE_CC_LEN8_DLC flag has to be enabled in the CAN driver.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanFrame.Data">
            <summary>
            Classical CAN Frame payload.
            </summary>
        </member>
        <member name="M:SocketCANSharp.CanFrame.#ctor(System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the CanFrame structure with the specified CAN ID and Data payload.
            </summary>
            <param name="canId">CAN ID including remote, error, and SFF/EFF flags.</param>
            <param name="data">Payload data.</param>
        </member>
        <member name="M:SocketCANSharp.CanFrame.ToString">
            <summary>
            Returns a string that represents the current CanFrame object.
            </summary>
            <returns>A string that represents the current CanFrame object.</returns>
        </member>
        <member name="T:SocketCANSharp.CanIsoTpFlowControlOptions">
            <summary>
            Represents options for handling ISO 15765-2 (ISO-TP) FlowControl (FC) Frames.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanIsoTpFlowControlOptions.BlockSize">
            <summary>
            BlockSize is part of the FC Frame and is the requested number of frames to send per block between FC Frames. Set to 0 to turn off (no limit).
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanIsoTpFlowControlOptions.Stmin">
            <summary>
            Separation Time is part of the FC Frame and is the requested minimum separation time between each frame in a block. 
            0x00 - 0x7F : 0 - 127 ms
            0x80 - 0xF0 : reserved
            0xF1 - 0xF9 : 100 us - 900 us
            0xFA - 0xFF : reserved
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanIsoTpFlowControlOptions.WftMax">
            <summary>
            Maximum number of consecutive FC frames with 'wait' FlowStatus (FS = 1) allowed. Set to 0 to disable.
            </summary>
        </member>
        <member name="M:SocketCANSharp.CanIsoTpFlowControlOptions.#ctor">
            <summary>
            Initializes a new instance of the CanIsoTpFlowControlOptions class using sensible default values.
            </summary>
        </member>
        <member name="M:SocketCANSharp.CanIsoTpFlowControlOptions.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the CanIsoTpFlowControlOptions class using the supplied BlockSize, STmin, and WFTmax values.
            </summary>
            <param name="blockSize">BlockSize to set in FC Frame.</param>
            <param name="stmin">STmin to set in FC Frame.</param>
            <param name="wftMax">Maximum number of 'Wait' FC Frame Transmissions allowed.</param>
        </member>
        <member name="M:SocketCANSharp.CanIsoTpFlowControlOptions.ToString">
            <summary>
            Returns a string that represents the current CanIsoTpFlowControlOptions object.
            </summary>
            <returns>A string that represents the current CanIsoTpFlowControlOptions object.</returns>
        </member>
        <member name="T:SocketCANSharp.CanIsoTpLinkLayerOptions">
            <summary>
            Represents Link Layer options for ISO 15765-2 (ISO-TP).
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanIsoTpLinkLayerOptions.Mtu">
            <summary>
            Maximum Transmission Unit (MTU) which represents the CAN Frame Type.
            Classical CAN (2.0) Frame: 16
            CAN FD Frame: 72
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanIsoTpLinkLayerOptions.TxDataLength">
            <summary>
            Link Layer Transmit Length: 8, 12, 16, 20, 24, 32, 48, 64	
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanIsoTpLinkLayerOptions.TxFlags">
            <summary>
            CAN FD specific flags (BRS, ESI, etc.) to use when transmitting CAN FD Frames.
            </summary>
        </member>
        <member name="M:SocketCANSharp.CanIsoTpLinkLayerOptions.#ctor">
            <summary>
            Initializes a new instance of the CanIsoTpLinkLayerOptions class using all default values.
            </summary>
        </member>
        <member name="M:SocketCANSharp.CanIsoTpLinkLayerOptions.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the CanIsoTpLinkLayerOptions class using the specified MTU and Transmit Data Length. No CAN FD specific flags are set.
            </summary>
            <param name="mtu">Maximum Transmission Unit</param>
            <param name="txDataLength">Transmit Data Length</param>
        </member>
        <member name="M:SocketCANSharp.CanIsoTpLinkLayerOptions.#ctor(System.Byte,System.Byte,SocketCANSharp.CanFdFlags)">
            <summary>
            Initializes a new instance of the CanIsoTpLinkLayerOptions class using the specified MTU, Transmit Data Length and Transmit Flags.
            </summary>
            <param name="mtu">Maximum Transmission Unit</param>
            <param name="txDataLength">Transmit Data Length</param>
            <param name="txFlags">CAN FD specific flags</param>
        </member>
        <member name="M:SocketCANSharp.CanIsoTpLinkLayerOptions.ToString">
            <summary>
            Returns a string that represents the current CanIsoTpLinkLayerOptions object.
            </summary>
            <returns>A string that represents the current CanIsoTpLinkLayerOptions object.</returns>
        </member>
        <member name="T:SocketCANSharp.CanIsoTpOptions">
            <summary>
            Represents ISO 15765-2 (ISO-TP) options.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanIsoTpOptions.Flags">
            <summary>
            Specifies ISO-TP behavior for extended addressing, broadcasting, frame padding, etc.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanIsoTpOptions.FrameTxTime">
            <summary>
            Transmission time for frames in nano seconds.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanIsoTpOptions.ExtendedAddress">
            <summary>
            Extended Addressing to use when transmitting ISO-TP messages.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanIsoTpOptions.TxPadByte">
            <summary>
            Padding bytes to use when transmitting padded frames.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanIsoTpOptions.RxPadByte">
            <summary>
            Padding bytes to expect when receiving padded frames.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanIsoTpOptions.RxExtendedAddress">
            <summary>
            Extended Addressing to expect when receiving ISO-TP messages.
            </summary>
        </member>
        <member name="M:SocketCANSharp.CanIsoTpOptions.ToString">
            <summary>
            Returns a string that represents the current CanIsoTpOptions object.
            </summary>
            <returns>A string that represents the current CanIsoTpOptions object.</returns>
        </member>
        <member name="T:SocketCANSharp.CanRawVcidOptions">
            <summary>
            CAN XL Virtual CAN network ID Handling Configuration
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanRawVcidOptions.Flags">
            <summary>
            Flags for VCID Behavior Options.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanRawVcidOptions.TxVCID">
            <summary>
            VCID Value to set into the Priority composite field of CAN XL Frame structs when CAN_RAW_XL_VCID_TX_SET is set in Flags.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanRawVcidOptions.RxVCID">
            <summary>
            VCID Value to compare after applying mask on received CAN XL Frames for filtering purposes when CAN_RAW_XL_VCID_RX_FILTER is set in Flags.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanRawVcidOptions.RxVCIDMask">
            <summary>
            VCID Mask to apply on received CAN XL Frames for filtering purposes when CAN_RAW_XL_VCID_RX_FILTER is set in Flags.
            </summary>
        </member>
        <member name="T:SocketCANSharp.CanXlFrame">
            <summary>
            Represents a CAN XL (Controller Area Network Extra Long) Frame
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanXlFrame.Priority">
            <summary>
            Priority property contains multiple elements: 
                Bits 0-10: 11-bit Priority ID for bus arbitration purposes on the CAN XL network.
                Bits 15-23: 8-bit Virtual CAN network ID which allows running up to 256 logical networks on a single physical CAN XL network.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanXlFrame.Flags">
            <summary>
            CAN XL specific flags for SEC, XL Format.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanXlFrame.SduType">
            <summary>
            CAN XL SDU (Service Data Unit) Type.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanXlFrame.Length">
            <summary>
            Frame payload length in bytes.
            </summary>
        </member>
        <member name="P:SocketCANSharp.CanXlFrame.AcceptanceField">
            <summary>
            Addressing information.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanXlFrame.Data">
            <summary>
            CAN XL Frame payload.
            </summary>
        </member>
        <member name="M:SocketCANSharp.CanXlFrame.#ctor(System.UInt32,SocketCANSharp.CanXlSduType,System.UInt32,System.Byte[],SocketCANSharp.CanXlFlags)">
            <summary>
            Initializes a new instance of the CanXlFrame structure using the supplied priority, SDT, acceptance field, flags and data.
            </summary>
            <param name="priority">Priority property containing Priority ID and VCID.</param>
            <param name="sdt">SDU (Service Data Unit) Type.</param>
            <param name="acceptanceField">Acceptance field containing address information.</param>
            <param name="data">Payload data.</param>
            <param name="flags">CAN XL specific flags.</param>
        </member>
        <member name="M:SocketCANSharp.CanXlFrame.SetPriorityId(System.UInt16)">
            <summary>
            Shortcut to set the Priority ID element on the Priority property.
            </summary>
            <param name="priorityId">11-bit Priority ID</param>
        </member>
        <member name="M:SocketCANSharp.CanXlFrame.GetPriorityId">
            <summary>
            Shortcut to get the Priority ID element from the Priority property.
            </summary>
            <returns>11-bit Priority ID</returns>
        </member>
        <member name="M:SocketCANSharp.CanXlFrame.SetVCID(System.Byte)">
            <summary>
            Shortcut to set the VCID element on the Priority property.
            </summary>
            <param name="vcid">8-bit Virtual CAN network ID</param>
        </member>
        <member name="M:SocketCANSharp.CanXlFrame.GetVCID">
            <summary>
            Shortcut to get the VCID element from the Priority property.
            </summary>
            <returns>8-bit Virtual CAN network ID</returns>
        </member>
        <member name="M:SocketCANSharp.CanXlFrame.ToString">
            <summary>
            Returns a string that represents the current CanXlFrame object.
            </summary>
            <returns>A string that represents the current CanXlFrame object.</returns>
        </member>
        <member name="T:SocketCANSharp.Capabilities.CapabilityUtils">
            <summary>
            Constants associated with Capabilities.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Capabilities.CapabilityUtils.IsCapabilityRaised(SocketCANSharp.Capabilities.UserCapabilityData[],SocketCANSharp.Capabilities.Capability)">
            <summary>
            Checks whether a capability is in the effective set or not.
            </summary>
            <param name="dataArray">Capability data associated with a thread</param>
            <param name="cap">Capability</param>
            <returns>True, if the capability is in the effective set, otherwise False.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the data array is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the data array is not long enough</exception>
        </member>
        <member name="M:SocketCANSharp.Capabilities.CapabilityUtils.GetPreferredCapabilityVersion">
            <summary>
            Retrieves the preferred capability version of the system.
            </summary>
            <returns>Preferred capability version of the system</returns>
            <exception cref="T:System.NotSupportedException">If capget call fails, then this exception is thrown</exception>
        </member>
        <member name="M:SocketCANSharp.Capabilities.CapabilityUtils.IsCurrentProcessCapable(SocketCANSharp.Capabilities.Capability)">
            <summary>
            Determines if the current process possesses the designated capability in the effective set or not. 
            </summary>
            <param name="capability">Capability to check</param>
            <returns>True, if capability is in effective set. Otherwise, false.</returns>
            <exception cref="T:System.PlatformNotSupportedException">If capget call fails, then this exception is thrown</exception>
        </member>
        <member name="T:SocketCANSharp.Capabilities.CapConstants">
            <summary>
            Constants associated with Capabilities.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.CapConstants.LINUX_CAPABILITY_U32S_1">
            <summary>
            The number of capabilities that the kernel has for version 1 of the Capabilities API which is 1 unsigned 32-bit integer worth.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.CapConstants.LINUX_CAPABILITY_U32S_2">
            <summary>
            The number of capabilities that the kernel has for version 2 of the Capabilities API which is 2 unsigned 32-bit integers worth.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.CapConstants.LINUX_CAPABILITY_U32S_3">
            <summary>
            The number of capabilities that the kernel has for version 3 of the Capabilities API which is 2 unsigned 32-bit integers worth.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Capabilities.CapNativeMethods">
            <summary>
            Native functions to access capability-related information. 
            </summary>
        </member>
        <member name="M:SocketCANSharp.Capabilities.CapNativeMethods.CapGet(SocketCANSharp.Capabilities.UserCapabilityHeader,SocketCANSharp.Capabilities.UserCapabilityData[])">
            <summary>
            Get capabilities associated with a thread. 
            </summary>
            <param name="hdrp">User Capability Header</param>
            <param name="datap">User Capability Data Array</param>
            <returns>0 on success, -1 on error.</returns>
        </member>
        <member name="T:SocketCANSharp.Capabilities.CapabilitySet">
            <summary>
            Capability sets associated with a thread.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.CapabilitySet.Effective">
            <summary>
            Capabilities a thread may exercise.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.CapabilitySet.Inheritable">
            <summary>
            Capabilities a thread may pass through an execve call.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.CapabilitySet.Permitted">
            <summary>
            Capabilities a thread can make effective or inheritable. 
            </summary>
        </member>
        <member name="T:SocketCANSharp.Capabilities.LinuxCapabilityVersion">
            <summary>
            Linux capability version. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.LinuxCapabilityVersion.UNSUPPORTED_LINUX_CAPABILITY_VERSION">
            <summary>
            Unsupported version used for probing the current preferred capability version.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.LinuxCapabilityVersion.LINUX_CAPABILITY_VERSION_1">
            <summary>
            Kernels prior to 2.6.25 prefer 32-bit capabilities via version 1 of the Capabilities API.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.LinuxCapabilityVersion.LINUX_CAPABILITY_VERSION_2">
            <summary>
            Kernel 2.6.25 added 64-bit capability sets via version 2 of the Capabilities API.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.LinuxCapabilityVersion.LINUX_CAPABILITY_VERSION_3">
            <summary>
            Kernels starting with 2.6.26 fix an API glitch that was present in version 2 via version 3 of the Capabilities API.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Capabilities.Capability">
            <summary>
            Capabilities are distinct privileges traditionally associated with a superuser (root).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_CHOWN">
            <summary>
            Make changes to file UIDs and GIDs (chown).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_DAC_OVERRIDE">
            <summary>
            Bypass discretionary access control (read, write, execution) permission checks.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_DAC_READ_SEARCH">
            <summary>
            Bypass discretionary access control for file read, directory read and execution permission checks.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_FOWNER">
            <summary>
            Bypass permission checks on operations which require the file system UID of the process to match the UID of the file not including those covered by CAP_DAC_OVERRIDE and CAP_DAC_READ_SEARCH.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_FSETID">
            <summary>
            Bypass restrictions that the effective ID shall match the file owner ID when setting the permission bits. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_KILL">
            <summary>
            Bypass restrictions for sending signals to a process.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SETGID">
            <summary>
            Bypass restrictions on GID setting and allow for GID forging. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SETUID">
            <summary>
            Bypass restrictions on UID setting and allow for UID forging. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SETPCAP">
            <summary>
            Bypass restrictions on capability modifications.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_LINUX_IMMUTABLE">
            <summary>
            Enables the setting of the FS_APPEND_FL and FS_IMMUTABLE_FL file attributes.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_NET_BIND_SERVICE">
            <summary>
            Allows binding to privileged ports. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_NET_BROADCAST">
            <summary>
            Enables broadcasting and listening to multicasts.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_NET_ADMIN">
            <summary>
            Enables performing various network administrative tasks.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_NET_RAW">
            <summary>
            Enables use of RAW and PACKET sockets and binding to any address for transparent proxying. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_IPC_LOCK">
            <summary>
            Allows for memory locking.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_IPC_OWNER">
            <summary>
            Bypass restrictions regarding IPC ownership.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SYS_MODULE">
            <summary>
            Enables loading and unloading of kernel modules.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SYS_RAWIO">
            <summary>
            Enables various I/O operations.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SYS_CHROOT">
            <summary>
            Enables use of chroot.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SYS_PTRACE">
            <summary>
            Enables tracing of any process.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SYS_PACCT">
            <summary>
            Enables turning on or off process accounting.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SYS_ADMIN">
            <summary>
            Enables a range of system administrative operations.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SYS_BOOT">
            <summary>
            Enables use of reboot and the loading of a new kernel for execution following reboot. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SYS_NICE">
            <summary>
            Enables raising the priority of any process, manipulation of the scheduling algorithms of any process, setting CPU affinity of any process, etc.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SYS_RESOURCE">
            <summary>
            Enables overrides of various system resources (file systems, disks, console allocation, keymaps, etc.).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SYS_TIME">
            <summary>
            Enables the setting of the system clock and real-time clock. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SYS_TTY_CONFIG">
            <summary>
            Eables vhangup and privileged configuration operations on virtual terminals.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_MKNOD">
            <summary>
            Enables creating special files via mknod.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_LEASE">
            <summary>
            Enables creating leases on any file.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_AUDIT_WRITE">
            <summary>
            Enables writing to the kernel audit log.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_AUDIT_CONTROL">
            <summary>
            Enables the configuration of the audit log.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SETFCAP">
            <summary>
            Enables the setting of capabilities on files.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_MAC_OVERRIDE">
            <summary>
            Enables the Override of Mandatory Access Control (MAC).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_MAC_ADMIN">
            <summary>
            Enables MAC configuration and state changes.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_SYSLOG">
            <summary>
            Enables configuration of the kernel syslog.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_WAKE_ALARM">
            <summary>
            Enables triggering something which will wake up the system.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_BLOCK_SUSPEND">
            <summary>
            Enables blocking of system suspension.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_AUDIT_READ">
            <summary>
            Enables reading of the audit log.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_PERFMON">
            <summary>
            Enables performance monitoring operations.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_BPF">
            <summary>
            Enable privileged Berkeley Packet Filter operations.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Capabilities.Capability.CAP_CHECKPOINT_RESTORE">
            <summary>
            Enables checkpoint/restore functionality.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Capabilities.UserCapabilityData">
            <summary>
            Information about the capability sets of a thread.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Capabilities.UserCapabilityData.Effective">
            <summary>
            The set of capabilities used by the kernel to perform permission checks on the thread.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Capabilities.UserCapabilityData.Permitted">
            <summary>
            The limiting superset for the effective capabilities that the thread may assume and the capabilities 
            that may be added to the inheritable set by the thread if it does not have the CAP_SETPCAP capability in its 
            effective set.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Capabilities.UserCapabilityData.Inheritable">
            <summary>
            A set of capabilities preserved across an execve call. This enables the thread to assign capabilities 
            to the permitted set of a newly executed program. 
            </summary>
        </member>
        <member name="T:SocketCANSharp.Capabilities.UserCapabilityHeader">
            <summary>
            Header used in requests to get or set the capability sets of a thread.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Capabilities.UserCapabilityHeader.Version">
            <summary>
            Linux capability version.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Capabilities.UserCapabilityHeader.Pid">
            <summary>
            Process ID of the process to get or set capabilities for.
            </summary>
        </member>
        <member name="T:SocketCANSharp.ControlMessageMacros">
            <summary>
            Macros used to create and access Control Messages. Control Messages are also referred to as Ancillary Data. 
            The Control Messages are not part of the Socket payload and can be sent via `sendmsg` and received via `recvmsg`.
            </summary>
        </member>
        <member name="M:SocketCANSharp.ControlMessageMacros.CMSG_ALIGN(System.Int32)">
            <summary>
            Given a length this function will return it along with the required alignment. 
            </summary>
            <param name="len">Length of data</param>
            <returns>Length along with the required alignment</returns>
        </member>
        <member name="M:SocketCANSharp.ControlMessageMacros.CMSG_SPACE(System.Int32)">
            <summary>
            Returns the number of bytes an ancillary element with the provided data length occupies.
            </summary>
            <param name="len">Length of data</param>
            <returns>Number of bytes occupied by an ancillary element of the provided length</returns>
        </member>
        <member name="T:SocketCANSharp.SocketCanProtocolType">
            <summary>
            Protocols of the PF_CAN protocol family.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanProtocolType.CAN_RAW">
            <summary>
            Raw CAN
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanProtocolType.CAN_BCM">
            <summary>
            CAN Broadcast Manager
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanProtocolType.CAN_TP16">
            <summary>
            VW Transport Protocol v1.6
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanProtocolType.CAN_TP20">
            <summary>
            VW Transport Protocol v2.0
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanProtocolType.CAN_ISOTP">
            <summary>
            ISO 15765-2 Transport Protocol
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanProtocolType.CAN_J1939">
            <summary>
            SAE J1939
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanProtocolType.CAN_NPROTO">
            <summary>
            For Future Protocol
            </summary>
        </member>
        <member name="T:SocketCANSharp.SocketLevel">
            <summary>
            Socket levels at which options reside.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketLevel.SOL_SOCKET">
            <summary>
            Socket Option Level for Socket Layer itself. For Protocol Independent Options.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketLevel.SOL_CAN_RAW">
            <summary>
            Socket Option Level for Raw CAN protocol.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketLevel.SOL_CAN_ISOTP">
            <summary>
            Socket Option Level for ISO-TP over CAN protocol.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketLevel.SOL_CAN_J1939">
            <summary>
            Socket Option Level for J1939 over CAN protocol.
            </summary>
        </member>
        <member name="T:SocketCANSharp.CanSocketOptions">
            <summary>
            CAN_RAW socket options.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanSocketOptions.CAN_RAW_FILTER">
            <summary>
            Set 0 to N Raw CAN Filters.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanSocketOptions.CAN_RAW_ERR_FILTER">
            <summary>
            Set Filter for Raw CAN Error Frames.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanSocketOptions.CAN_RAW_LOOPBACK">
            <summary>
            Local loopback for Raw CAN (on by default)
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanSocketOptions.CAN_RAW_RECV_OWN_MSGS">
            <summary>
            Receive own Raw CAN messages (off by default)
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanSocketOptions.CAN_RAW_FD_FRAMES">
            <summary>
            Allow for CAN FD frames (off by default)
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanSocketOptions.CAN_RAW_JOIN_FILTERS">
            <summary>
            All filters must match
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanSocketOptions.CAN_RAW_XL_FRAMES">
            <summary>
            Allow for CAN XL frames (off by default)
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanSocketOptions.CAN_RAW_XL_VCID_OPTS">
            <summary>
            CAN XL Virtual CAN network ID (VCID) Configuration Options
            </summary>
        </member>
        <member name="T:SocketCANSharp.SocketLevelOptions">
            <summary>
            Socket Layer Options.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketLevelOptions.SO_BROADCAST">
            <summary>
            Permits sending of broadcast messages, if it is supported by the underlying protocol. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketLevelOptions.SO_SNDBUF">
            <summary>
            Reports the size, in bytes, of the send buffer of the socket. The kernel doubles the value supplied in the call to setsockopt and this doubled value is what is returned when getsockopt is called. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketLevelOptions.SO_RCVBUF">
            <summary>
            Reports the size, in bytes, of the receive buffer of the socket. The kernel doubles the value supplied in the call to setsockopt and this doubled value is what is returned when getsockopt is called. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketLevelOptions.SO_RCVTIMEO">
            <summary>
            Sets the timeout value to wait for an input function (read, recv, etc.) to complete. Set to 0 to wait indefinitely.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketLevelOptions.SO_SNDTIMEO">
            <summary>
            Sets the timeout value to wait for an output function (write, send, etc.) to complete. Set to 0 to wait indefinitely.
            </summary>
        </member>
        <member name="T:SocketCANSharp.MessageFlags">
            <summary>
            Bits in the FLAGS argument of `send', `recv', etc. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.MessageFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:SocketCANSharp.MessageFlags.MSG_PEEK">
            <summary>
            Peek at incoming messages without removing them from the receive queue.
            </summary>
        </member>
        <member name="F:SocketCANSharp.MessageFlags.MSG_DONTROUTE">
            <summary>
            Set when the received CAN frame was created on the local host.
            </summary>
        </member>
        <member name="F:SocketCANSharp.MessageFlags.MSG_TRUNC">
            <summary>
            Return the real length of the packet or datagram even when it is larger than the passed buffer.
            </summary>
        </member>
        <member name="F:SocketCANSharp.MessageFlags.MSG_DONTWAIT">
            <summary>
            Nonblocking IO.
            </summary>
        </member>
        <member name="F:SocketCANSharp.MessageFlags.MSG_CONFIRM">
            <summary>
            Set when the CAN frame was sent via the socket it is received on. This can be treated as a TX confirmation mechanism. 
            </summary>
        </member>
        <member name="T:SocketCANSharp.CanIsoTpSocketOptions">
            <summary>
            CAN_ISOTP socket options.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanIsoTpSocketOptions.CAN_ISOTP_OPTS">
            <summary>
            For passing CanIsoTpOptions.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanIsoTpSocketOptions.CAN_ISOTP_RECV_FC">
            <summary>
            For passing CanIsoTpFlowControlOptions.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanIsoTpSocketOptions.CAN_ISOTP_TX_STMIN">
            <summary>
            For passing an unsigned 32-bit value representing the time in nano secs to use for STmin instead of the value provided in the FC frame from the receiver.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanIsoTpSocketOptions.CAN_ISOTP_RX_STMIN">
            <summary>
            For passing an unsigned 32-bit value representing the time in nano secs to use for STmin and ignore received CF frames which timestamps differ less than this value.  
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanIsoTpSocketOptions.CAN_ISOTP_LL_OPTS">
            <summary>
            For passing CanIsoTpLinkLayerOptions.
            </summary>
        </member>
        <member name="T:SocketCANSharp.CanIdFlags">
            <summary>
            Special address description flags for the CAN ID field.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanIdFlags.CAN_EFF_FLAG">
            <summary>
            Specifies whether to use Extended Frame Format (EFF) or Standard Frame Format (SFF).
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanIdFlags.CAN_RTR_FLAG">
            <summary>
            Specifies whether the CAN ID has the Remote Transmission Request (RTR) bit set or not.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanIdFlags.CAN_ERR_FLAG">
            <summary>
            Specifies whether this CAN Frame is an Error Frame or not.
            </summary>
        </member>
        <member name="T:SocketCANSharp.CanFdFlags">
            <summary>
            CAN FD specific flags.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanFdFlags.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanFdFlags.CANFD_BRS">
            <summary>
            Bit Rate Switch - Sets the BRS bit meaning that the payload is transmitted at the Data Rate instead of the Arbitration Rate.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanFdFlags.CANFD_ESI">
            <summary>
            Error State Indicator - Sets the ESI bit to indicate that the node is in Error Passive mode.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanFdFlags.CANFD_FDF">
            <summary>
            FD Frame - Indicates that CAN FD is using the CanFdFrame structure for both Classical CAN and CAN FD content.
            </summary>
        </member>
        <member name="T:SocketCANSharp.CanErrorClass">
            <summary>
            Error Class (Mask) in CAN ID.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanErrorClass.CAN_ERR_TX_TIMEOUT">
            <summary>
            TX timeout by netdevice driver
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanErrorClass.CAN_ERR_LOSTARB">
            <summary>
            Lost arbitration - See CAN Data[0]
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanErrorClass.CAN_ERR_CRTL">
            <summary>
            CAN controller problems - See CAN Data[1]
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanErrorClass.CAN_ERR_PROT">
            <summary>
            CAN protocol violations - See CAN Data[2-3]
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanErrorClass.CAN_ERR_TRX">
            <summary>
            CAN transceiver status - See CAN Data[4]
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanErrorClass.CAN_ERR_ACK">
            <summary>
            Received no ACK on transmission
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanErrorClass.CAN_ERR_BUSOFF">
            <summary>
            Bus off
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanErrorClass.CAN_ERR_BUSERROR">
            <summary>
            Bus error
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanErrorClass.CAN_ERR_RESTARTED">
            <summary>
            CAN controller restarted
            </summary>
        </member>
        <member name="T:SocketCANSharp.CanControllerErrorStatus">
            <summary>
            Error status of CAN controller specified in CAN Data[1] of Error Frame
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanControllerErrorStatus.CAN_ERR_CRTL_UNSPEC">
            <summary>
            No CAN Controller error specified
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanControllerErrorStatus.CAN_ERR_CRTL_RX_OVERFLOW">
            <summary>
            RX buffer overflow
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanControllerErrorStatus.CAN_ERR_CRTL_TX_OVERFLOW">
            <summary>
            TX buffer overflow 
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanControllerErrorStatus.CAN_ERR_CRTL_RX_WARNING">
            <summary>
            Reached warning level for RX errors
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanControllerErrorStatus.CAN_ERR_CRTL_TX_WARNING">
            <summary>
            Reached warning level for TX errors
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanControllerErrorStatus.CAN_ERR_CRTL_RX_PASSIVE">
            <summary>
            Reached error passive status RX
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanControllerErrorStatus.CAN_ERR_CRTL_TX_PASSIVE">
            <summary>
            reached error passive status TX
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanControllerErrorStatus.CAN_ERR_CRTL_ACTIVE">
            <summary>
            Recovered to error active state
            </summary>
        </member>
        <member name="T:SocketCANSharp.CanProtocolErrorType">
            <summary>
            Error type in CAN protocol (type) specified in CAN Data[2] of Error Frame
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorType.CAN_ERR_PROT_UNSPEC">
            <summary>
            No CAN protocol error type specified
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorType.CAN_ERR_PROT_BIT">
            <summary>
            Single bit error
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorType.CAN_ERR_PROT_FORM">
            <summary>
            Frame format error
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorType.CAN_ERR_PROT_STUFF">
            <summary>
            Bit stuffing error
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorType.CAN_ERR_PROT_BIT0">
            <summary>
            Unable to send dominant bit
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorType.CAN_ERR_PROT_BIT1">
            <summary>
            unable to send recessive bit
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorType.CAN_ERR_PROT_OVERLOAD">
            <summary>
            Bus overload
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorType.CAN_ERR_PROT_ACTIVE">
            <summary>
            Active error announcement
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorType.CAN_ERR_PROT_TX">
            <summary>
            Error occurred on transmission
            </summary>
        </member>
        <member name="T:SocketCANSharp.CanProtocolErrorLocation">
            <summary>
            Location of CAN protocol error specified in CAN Data[3] of Error Frame
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_UNSPEC">
            <summary>
            Error Location not specified
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_ID28_21">
            <summary>
            ID bits 28-21 (SFF: 10-3)
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_SOF">
            <summary>
            Start of frame
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_SRTR">
            <summary>
            Substitute RTR (SFF: RTR)
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_IDE">
            <summary>
            Identifier extension
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_ID20_18">
            <summary>
            ID bits 20-18 (SFF: 2-0)
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_ID17_13">
            <summary>
            ID bits 17-13
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_CRC_SEQ">
            <summary>
            CRC sequence
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_RES0">
            <summary>
            Reserved bit 0
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_DATA">
            <summary>
            Data section
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_DLC">
            <summary>
            Data length code
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_RTR">
            <summary>
            RTR
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_RES1">
            <summary>
            Reserved bit 1
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_ID04_00">
            <summary>
            ID bits 4-0
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_ID12_05">
            <summary>
            ID bits 12-5
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_INTERM">
            <summary>
            Intermission
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_CRC_DEL">
            <summary>
            CRC delimiter
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_ACK">
            <summary>
            ACK slot
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_EOF">
            <summary>
            End of frame
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanProtocolErrorLocation.CAN_ERR_PROT_LOC_ACK_DEL">
            <summary>
            ACK delimiter
            </summary>
        </member>
        <member name="T:SocketCANSharp.CanTransceiverErrorStatus">
            <summary>
            Error status of CAN transceiver specified in CAN Data[4] of Error Frame
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanTransceiverErrorStatus.CAN_ERR_TRX_UNSPEC">
            <summary>
            Transceiver error status not specified
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanTransceiverErrorStatus.CAN_ERR_TRX_CANH_NO_WIRE">
            <summary>
            CANH No Wire
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanTransceiverErrorStatus.CAN_ERR_TRX_CANH_SHORT_TO_BAT">
            <summary>
            CANH Short to Battery
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanTransceiverErrorStatus.CAN_ERR_TRX_CANH_SHORT_TO_VCC">
            <summary>
            CANH Short to Voltage
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanTransceiverErrorStatus.CAN_ERR_TRX_CANH_SHORT_TO_GND">
            <summary>
            CANH Short to Ground
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanTransceiverErrorStatus.CAN_ERR_TRX_CANL_NO_WIRE">
            <summary>
            CANL No Wire
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanTransceiverErrorStatus.CAN_ERR_TRX_CANL_SHORT_TO_BAT">
            <summary>
            CANL Short to Battery
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanTransceiverErrorStatus.CAN_ERR_TRX_CANL_SHORT_TO_VCC">
            <summary>
            CANL Short to Voltage
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanTransceiverErrorStatus.CAN_ERR_TRX_CANL_SHORT_TO_GND">
            <summary>
            CANL Short to Ground
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanTransceiverErrorStatus.CAN_ERR_TRX_CANL_SHORT_TO_CANH">
            <summary>
            CANL Short to CANH
            </summary>
        </member>
        <member name="T:SocketCANSharp.IsoTpFlags">
            <summary>
            ISO 15765-2 (ISO-TP) Option Flags
            </summary>
        </member>
        <member name="F:SocketCANSharp.IsoTpFlags.CAN_ISOTP_LISTEN_MODE">
            <summary>
            Listen only (do not send Flow Control Frames in response to First Frames)
            </summary>
        </member>
        <member name="F:SocketCANSharp.IsoTpFlags.CAN_ISOTP_EXTEND_ADDR">
            <summary>
            Enable extended addressing.
            </summary>
        </member>
        <member name="F:SocketCANSharp.IsoTpFlags.CAN_ISOTP_TX_PADDING">
            <summary>
            Enable CAN frame padding on transmissions.
            </summary>
        </member>
        <member name="F:SocketCANSharp.IsoTpFlags.CAN_ISOTP_RX_PADDING">
            <summary>
            Enable CAN frame padding on receptions.
            </summary>
        </member>
        <member name="F:SocketCANSharp.IsoTpFlags.CAN_ISOTP_CHK_PAD_LEN">
            <summary>
            Check received CAN frame padding length.
            </summary>
        </member>
        <member name="F:SocketCANSharp.IsoTpFlags.CAN_ISOTP_CHK_PAD_DATA">
            <summary>
            Check received CAN frame padding byte.
            </summary>
        </member>
        <member name="F:SocketCANSharp.IsoTpFlags.CAN_ISOTP_HALF_DUPLEX">
            <summary>
            Half duplex error state handling.
            </summary>
        </member>
        <member name="F:SocketCANSharp.IsoTpFlags.CAN_ISOTP_FORCE_TXSTMIN">
            <summary>
            Ignore STmin in received Flow Control Frames.
            </summary>
        </member>
        <member name="F:SocketCANSharp.IsoTpFlags.CAN_ISOTP_FORCE_RXSTMIN">
            <summary>
            Ignore Consecutive Frames that do not honor transmitted STmin.
            </summary>
        </member>
        <member name="F:SocketCANSharp.IsoTpFlags.CAN_ISOTP_RX_EXT_ADDR">
            <summary>
            Set different Extended Address for reception.
            </summary>
        </member>
        <member name="F:SocketCANSharp.IsoTpFlags.CAN_ISOTP_WAIT_TX_DONE">
            <summary>
            Wait for transmission to complete.
            </summary>
        </member>
        <member name="F:SocketCANSharp.IsoTpFlags.CAN_ISOTP_SF_BROADCAST">
            <summary>
            Enable 1-to-N functional addressing.
            </summary>
        </member>
        <member name="F:SocketCANSharp.IsoTpFlags.CAN_ISOTP_CF_BROADCAST">
            <summary>
            Enable 1-to-N functionally addressed segmented transfers without using Flow Control.
            Note: This is not supported via the ISO-TP specification (ISO 15765-2), but is instead a SocketCAN special feature.
            </summary>
        </member>
        <member name="T:SocketCANSharp.BcmOpcode">
            <summary>
            Broadcast Manager Operation Codes.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmOpcode.UNDEFINED">
            <summary>
            Undefined (Not Set).
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmOpcode.TX_SETUP">
            <summary>
            Create (cyclic) transmission task.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmOpcode.TX_DELETE">
            <summary>
            Remove (cyclic) transmission task.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmOpcode.TX_READ">
            <summary>
            Read properties of (cyclic) transmission task.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmOpcode.TX_SEND">
            <summary>
            Send a single CAN frame.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmOpcode.RX_SETUP">
            <summary>
            Create RX content filter subscription.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmOpcode.RX_DELETE">
            <summary>
            Remove RX content filter subscription.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmOpcode.RX_READ">
            <summary>
            Read properties of RX content filter subscription.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmOpcode.TX_STATUS">
            <summary>
            Reply sent by Broadcast Manager to a TX_READ request.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmOpcode.TX_EXPIRED">
            <summary>
            Notification sent by Broadcast Manager when count is reached and flag TX_COUNTEVT is set.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmOpcode.RX_STATUS">
            <summary>
            Reply sent by Broadcast Manager to a RX_READ request.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmOpcode.RX_TIMEOUT">
            <summary>
            Notification sent by Broadcast Manager when a cyclic message is absent.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmOpcode.RX_CHANGED">
            <summary>
            Notification sent by Broadcast Manager when a CAN frame is updated or first sent. 
            </summary>
        </member>
        <member name="T:SocketCANSharp.BcmFlags">
            <summary>
            Broadcast Manager (BCM) Option Flags.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmFlags.None">
            <summary>
            Not set.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmFlags.SETTIMER">
            <summary>
            Set the value of Interval1, Interval2 and Interval1Count.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmFlags.STARTTIMER">
            <summary>
            Start the timer with the actual value of Interval1, Interval2 and Interval1Count. Immediately starts transmitting CAN Frames.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmFlags.TX_COUNTEVT">
            <summary>
            Send the TX_EXPIRED message when Interval1Count is reached.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmFlags.TX_ANNOUNCE">
            <summary>
            A change of data by the process is emitted with a new frame immediately, regardless of the timer status.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmFlags.TX_CP_CAN_ID">
            <summary>
            Copies the CanId from the BCM message header to each subsequent CAN Frame in the frame sequence.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmFlags.RX_FILTER_ID">
            <summary>
            Filter by CanId only.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmFlags.RX_CHECK_DLC">
            <summary>
            A change of the DLC (Data Length Code) leads to an RX_CHANGED notitication.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmFlags.RX_NO_AUTOTIMER">
            <summary>
            Prevent automatically starting the timeout monitor.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmFlags.RX_ANNOUNCE_RESUME">
            <summary>
            When when a receive timeout occours, a RX_CHANGED will be generated when the (cyclic) receive restarts. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmFlags.TX_RESET_MULTI_IDX">
            <summary>
            Reset the index for a multiple frame transmission.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmFlags.RX_RTR_FRAME">
            <summary>
            Use the filter passed in the RX_SETUP as a CAN message to reply with when receiving a RTR frame.
            </summary>
        </member>
        <member name="F:SocketCANSharp.BcmFlags.CAN_FD_FRAME">
            <summary>
            The Broadcast Manager uses CAN FD Frames.
            </summary>
        </member>
        <member name="T:SocketCANSharp.J1939SocketOptions">
            <summary>
            CAN_J1939 socket options.
            </summary>
        </member>
        <member name="F:SocketCANSharp.J1939SocketOptions.SO_J1939_FILTER">
            <summary>
            Set filters.
            </summary>
        </member>
        <member name="F:SocketCANSharp.J1939SocketOptions.SO_J1939_PROMISC">
            <summary>
            Set or clear promiscuous mode.
            </summary>
        </member>
        <member name="F:SocketCANSharp.J1939SocketOptions.SO_J1939_SEND_PRIO">
            <summary>
            Change default send priority.
            </summary>
        </member>
        <member name="F:SocketCANSharp.J1939SocketOptions.SO_J1939_ERRQUEUE">
            <summary>
            Queue errors.
            </summary>
        </member>
        <member name="T:SocketCANSharp.EpollOperation">
            <summary>
            Operations to perform on an epoll file descriptor.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollOperation.EPOLL_CTL_ADD">
            <summary>
            Add a file descriptor to the interest list of the epoll file descriptor.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollOperation.EPOLL_CTL_DEL">
            <summary>
            Remove a file descriptor from the interest list of the epoll file descriptor.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollOperation.EPOLL_CTL_MOD">
            <summary>
            Change the settings associated with a file descriptor within the interest list.
            </summary>
        </member>
        <member name="T:SocketCANSharp.EpollEventType">
            <summary>
            Epoll event types.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLIN">
            <summary>
            The associated file descriptor is available for read operations.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLPRI">
            <summary>
            There is urgent data available to be read on the associated file descriptor.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLOUT">
            <summary>
            The associated file descriptor is available for write operations.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLERR">
            <summary>
            Error condition happened on the associated file descriptor.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLHUP">
            <summary>
            Hang up happened on the associated file descriptor.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLRDNORM">
            <summary>
            Same as EPOLLIN.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLRDBAND">
            <summary>
            Priority data band can be read.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLWRNORM">
            <summary>
            Same as EPOLLOUT.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLWRBAND">
            <summary>
            Priority data band may be written.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLMSG">
            <summary>
            Ignored (Do not use).
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLRDHUP">
            <summary>
            Stream socket peer closed connection, or shut down writing half of connection.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLEXCLUSIVE">
            <summary>
            Sets an exclusive wakeup mode for the epoll file descriptor that is being attached to the target file descriptor.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLWAKEUP">
            <summary>
            If EPOLLONESHOT and EPOLLET are clear and the process has the CAP_BLOCK_SUSPEND capability, then this will ensure that the system does not enter "suspend" or "hibernate" while this event is pending or being processed.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLONESHOT">
            <summary>
            Requests one-shot notification for the associated file descriptor. 
            This means that after an event is notified for the associated file descriptor then the file descriptor is disabled in the interest list and no other events will be reported for it.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollEventType.EPOLLET">
            <summary>
            Requests edge-triggered notification for the associated file descriptor. 
            The default behavior for epoll is level-triggered.
            </summary>
        </member>
        <member name="T:SocketCANSharp.CanXlFlags">
            <summary>
            CAN XL specific flags.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanXlFlags.CANXL_SEC">
            <summary>
            Simple Extended Content (i.e., security, fragmentation, etc.).
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanXlFlags.CANXL_XLF">
            <summary>
            Mandatory flag which must be set to indicate a valid CAN XL frame.
            </summary>
        </member>
        <member name="T:SocketCANSharp.CanXlSduType">
            <summary>
            CAN XL SDU (Service Data Unit) Type.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanXlSduType.ContentBasedAddressing">
            <summary>
            CAN XL Frames with Message ID in the Acceptance Field.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanXlSduType.NodeAddressing">
            <summary>
            CAN XL Frames with Destination and Source Address in the Acceptance Field.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanXlSduType.ClassicalAndFdFrameTunneling">
            <summary>
            Classical and CAN FD Frame Tunneling with CAN ID in the Acceptance Field.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanXlSduType.UnmappedEthernetFrameTunneling">
            <summary>
            Unmapped Ethernet Frame Tunneling with a user-defined value in the Acceptance Field.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanXlSduType.MappedEthernetFrameTunneling">
            <summary>
            Mapped Ethernet Frame Tunneling with a truncated destination MAC address in the Acceptance Field.
            </summary>
        </member>
        <member name="T:SocketCANSharp.CanXlVcidHandlingOption">
            <summary>
            Option flags for CAN XL Virtual CAN network ID (VCID) handling.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanXlVcidHandlingOption.CAN_RAW_XL_VCID_TX_SET">
            <summary>
            Set VCID in the transmitted CAN XL Frame in kernel space.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanXlVcidHandlingOption.CAN_RAW_XL_VCID_TX_PASS">
            <summary>
            Accept VCID value set from user space and do not clear it.
            Note: If CAN_RAW_XL_VCID_TX_SET is also enabled, then the associated VCID value for that option will override any value set from user space leveraging this option.
            </summary>
        </member>
        <member name="F:SocketCANSharp.CanXlVcidHandlingOption.CAN_RAW_XL_VCID_RX_FILTER">
            <summary>
            Apply VCID receive filter to received CAN XL Frames before passing them to user space. 
            Note: If this option is not set, then only untagged CAN XL Frames (VCID = 0x00) are passed to user space.
            </summary>
        </member>
        <member name="T:SocketCANSharp.EpollData">
            <summary>
            Settings associated with a file descriptor that is part of the interest list of an epoll file descriptor. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollData.Pointer">
            <summary>
            Used for storing a pointer in the epoll data.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollData.FileDescriptor">
            <summary>
            Used for storing a file descriptor in the epoll data.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollData.Unsigned32BitNumber">
            <summary>
            Used for storing an unsigned 32 bit number in the epoll data.
            </summary>
        </member>
        <member name="F:SocketCANSharp.EpollData.Unsigned64BitNumber">
            <summary>
            Used for storing an unsigned 64 bit number in the epoll data.
            </summary>
        </member>
        <member name="M:SocketCANSharp.EpollData.ToString">
            <summary>
            Returns a string that represents the current EpollData object.
            </summary>
            <returns>A string that represents the current EpollData object.</returns>
        </member>
        <member name="T:SocketCANSharp.EpollEvent">
            <summary>
            Settings associated with a file descriptor that is part of the interest list of an epoll file descriptor. 
            </summary>
        </member>
        <member name="P:SocketCANSharp.EpollEvent.Events">
            <summary>
            Epoll event types.
            </summary>
        </member>
        <member name="P:SocketCANSharp.EpollEvent.Data">
            <summary>
            User data - The data that the kernel should save and then return (via epoll_wait) when this file descriptor becomes ready.
            </summary>
        </member>
        <member name="M:SocketCANSharp.EpollEvent.ToString">
            <summary>
            Returns a string that represents the current EpollEvent object.
            </summary>
            <returns>A string that represents the current EpollEvent object.</returns>
        </member>
        <member name="T:SocketCANSharp.IfNameIndex">
            <summary>
            Contains information about one of the network interfaces on the local system.
            </summary>
        </member>
        <member name="P:SocketCANSharp.IfNameIndex.Index">
            <summary>
            Index of the interface.
            </summary>
        </member>
        <member name="P:SocketCANSharp.IfNameIndex.Name">
            <summary>
            Name of the interface.
            </summary>
        </member>
        <member name="M:SocketCANSharp.IfNameIndex.ToString">
            <summary>
            Returns a string that represents the current IfNameIndex object.
            </summary>
            <returns>A string that represents the current IfNameIndex object.</returns>
        </member>
        <member name="T:SocketCANSharp.Ifreq">
            <summary>
            Interface Request Structure used for Socket IOCTLs.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Ifreq.Name">
            <summary>
            Interface Name.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Ifreq.IfIndex">
            <summary>
            Interface Index.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Ifreq.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Ifreq class using the specified interface name.
            </summary>
            <param name="name">Interface Name</param>
        </member>
        <member name="M:SocketCANSharp.Ifreq.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Ifreq class using the specified interface index.
            </summary>
            <param name="index">Interface Index</param>
        </member>
        <member name="M:SocketCANSharp.Ifreq.ToString">
            <summary>
            Returns a string that represents the current Ifreq object.
            </summary>
            <returns>A string that represents the current Ifreq object.</returns>
        </member>
        <member name="T:SocketCANSharp.IfreqMtu">
            <summary>
            Interface Request Structure used for Socket IOCTLs.
            </summary>
        </member>
        <member name="F:SocketCANSharp.IfreqMtu.Name">
            <summary>
            Interface Name.
            </summary>
        </member>
        <member name="P:SocketCANSharp.IfreqMtu.MTU">
            <summary>
            Maximum Transmission Unit.
            </summary>
        </member>
        <member name="M:SocketCANSharp.IfreqMtu.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Ifreq class using the specified interface name.
            </summary>
            <param name="name">Interface Name</param>
        </member>
        <member name="M:SocketCANSharp.IfreqMtu.ToString">
            <summary>
            Returns a string that represents the current IfreqMtu object.
            </summary>
            <returns>A string that represents the current IfreqMtu object.</returns>
        </member>
        <member name="T:SocketCANSharp.IoVector">
            <summary>
            IO Vector structure used by the 'msghdr' struct.
            </summary>
        </member>
        <member name="P:SocketCANSharp.IoVector.Base">
            <summary>
            Specifies the storage area of the data.
            </summary>
        </member>
        <member name="P:SocketCANSharp.IoVector.Length">
            <summary>
            Size of the storage area in bytes.
            </summary>
        </member>
        <member name="M:SocketCANSharp.IoVector.ToString">
            <summary>
            Returns a string that represents the current IoVector object.
            </summary>
            <returns>A string that represents the current IoVector object.</returns>
        </member>
        <member name="T:SocketCANSharp.J1939Filter">
            <summary>
            Represents an SAE J1939 Filter.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939Filter.Name">
            <summary>
            NAME value to match against after applying the NAME Mask.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939Filter.NameMask">
            <summary>
            Mask to apply to the NAME.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939Filter.PGN">
            <summary>
            Parameter Group Number (PGN) to match against after applying the PGN Mask.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939Filter.PGNMask">
            <summary>
            Mask to apply to the PGN.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939Filter.Address">
            <summary>
            Address value to match against after applying the Address Mask.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939Filter.AddressMask">
            <summary>
            Mask to apply to the Address.
            </summary>
        </member>
        <member name="M:SocketCANSharp.J1939Filter.ToString">
            <summary>
            Returns a string that represents the current J1939Filter object.
            </summary>
            <returns>A string that represents the current J1939Filter object.</returns>
        </member>
        <member name="T:SocketCANSharp.LibcNativeMethods">
            <summary>
            C Standard Library Native Methods
            </summary>
        </member>
        <member name="P:SocketCANSharp.LibcNativeMethods.Errno">
            <summary>
            Number of the last error which indicates what went wrong. Set by system calls and some library functions when an error occurs.
            </summary>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Socket(System.Int32,System.Net.Sockets.SocketType,SocketCANSharp.SocketCanProtocolType)">
            <summary>
            Creates a CAN socket.
            </summary>
            <param name="addressFamily">Address Family</param>
            <param name="socketType">Type of socket</param>
            <param name="protocolType">CAN Protocol Type</param>
            <returns>Socket Handle Wrapper Instance</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Ioctl(SocketCANSharp.SafeFileDescriptorHandle,System.Int32,System.Int32@)">
            <summary>
            Manipulates the underlying device parameters of special files.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="request">Request Code</param>
            <param name="arg">Integer Argument</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Ioctl(SocketCANSharp.SafeFileDescriptorHandle,System.Int32,SocketCANSharp.Ifreq)">
            <summary>
            Manipulates the underlying device parameters of special files.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="request">Request Code</param>
            <param name="ifreq">Interface Request structure</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Ioctl(SocketCANSharp.SafeFileDescriptorHandle,System.Int32,SocketCANSharp.IfreqMtu)">
            <summary>
            Manipulates the underlying device parameters of special files.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="request">Request Code</param>
            <param name="ifreq">Interface Request structure</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Bind(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SockAddrCan,System.Int32)">
            <summary>
            Assigns the specified SocketCAN base address to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="addr">SocketCAN base address structure</param>
            <param name="addrSize">Size of address structure</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Bind(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SockAddrCanIsoTp,System.Int32)">
            <summary>
            Assigns the specified SocketCAN ISO-TP address to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="addr">SocketCAN ISO-TP address structure</param>
            <param name="addrSize">Size of address structure</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Bind(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SockAddrCanJ1939,System.Int32)">
            <summary>
            Assigns the specified SocketCAN J1939 address to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="addr">SocketCAN J1939 address structure</param>
            <param name="addrSize">Size of address structure</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Connect(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SockAddrCan,System.Int32)">
            <summary>
            Establishes a connection on the socket to the specified SocketCAN base address.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="addr">SocketCAN base address structure containing the peer address</param>
            <param name="addrSize">Size of address structure</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Connect(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SockAddrCanJ1939,System.Int32)">
            <summary>
            Establishes a connection on the socket to the specified SocketCAN base address.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="addr">SocketCAN J1939 address structure containing the peer address</param>
            <param name="addrSize">Size of address structure</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.CanFrame@,System.Int32)">
            <summary>
            Write the CanFrame to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrappper Instance</param>
            <param name="frame">CAN Frame to write</param>
            <param name="frameSize">Size of CAN Frame in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.CanFdFrame@,System.Int32)">
            <summary>
            Write the CanFdFrame to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="frame">CAN FD Frame to write</param>
            <param name="frameSize">Size of CAN FD Frame in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.CanXlFrame@,System.Int32)">
            <summary>
            Write the CanXlFrame to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="frame">CAN XL Frame to write</param>
            <param name="frameSize">Size of CAN XL Frame in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmCanMessage,System.Int32)">
            <summary>
            Write the BcmCanMessage to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="message">BCM Message to write</param>
            <param name="msgSize">Size of BCM Message in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmCanFdMessage,System.Int32)">
            <summary>
            Write the BcmCanFdMessage to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="message">BCM Message to write</param>
            <param name="msgSize">Size of BCM Message in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmCanSingleMessage,System.Int32)">
            <summary>
            Write the BcmCanSingleMessage to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="message">Special Single Frame BCM Message to write</param>
            <param name="msgSize">Size of BCM Message in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmCanFdSingleMessage,System.Int32)">
            <summary>
            Write the BcmCanFdSingleMessage to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="message">Special Single Frame BCM Message to write</param>
            <param name="msgSize">Size of BCM Message in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmMessageHeader,System.Int32)">
            <summary>
            Write the BcmMessageHeader to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="header">BCM Message Header to write</param>
            <param name="headerSize">Size of BCM Message Header in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmCanMessage32,System.Int32)">
            <summary>
            Write the BcmCanMessage to the socket. Variant for 32-bit.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="message">BCM Message to write</param>
            <param name="msgSize">Size of BCM Message in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmCanFdMessage32,System.Int32)">
            <summary>
            Write the BcmCanFdMessage to the socket. Variant for 32-bit.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="message">BCM Message to write</param>
            <param name="msgSize">Size of BCM Message in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmCanSingleMessage32,System.Int32)">
            <summary>
            Write the BcmCanSingleMessage to the socket. Variant for 32-bit.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="message">Special Single Frame BCM Message to write</param>
            <param name="msgSize">Size of BCM Message in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmCanFdSingleMessage32,System.Int32)">
            <summary>
            Write the BcmCanFdSingleMessage to the socket. Variant for 32-bit.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="message">Special Single Frame BCM Message to write</param>
            <param name="msgSize">Size of BCM Message in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmMessageHeader32,System.Int32)">
            <summary>
            Write the BcmMessageHeader to the socket. Variant for 32-bit.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="header">BCM Message Header to write</param>
            <param name="headerSize">Size of BCM Message Header in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,System.Byte[],System.Int32)">
            <summary>
            Write the byte array to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="data">Byte Array to write</param>
            <param name="dataSize">Size of Byte Array</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Read(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.CanFrame@,System.Int32)">
            <summary>
            Read a CanFrame from the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="frame">CAN Frame structure to populate</param>
            <param name="frameSize">Size of CAN Frame structure</param>
            <returns>The number of bytes read on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Read(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.CanFdFrame@,System.Int32)">
            <summary>
            Read a CanFdFrame from the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="frame">CAN FD Frame structure to populate</param>
            <param name="frameSize">Size of CAN FD Frame structure</param>
            <returns>The number of bytes read on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Read(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.CanXlFrame@,System.Int32)">
            <summary>
            Read a CanXlFrame from the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="frame">CAN XL Frame structure to populate</param>
            <param name="frameSize">Size of CAN XL Frame structure</param>
            <returns>The number of bytes read on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Read(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmCanMessage,System.Int32)">
            <summary>
            Read a BcmCanMessage from the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="message">BCM CAN Message structure to populate</param>
            <param name="msgSize">Size of BCM CAN Message structure</param>
            <returns>The number of bytes read on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Read(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmGenericMessage,System.Int32)">
            <summary>
            Read a BcmGenericMessage from the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="message">BCM Generic Message structure to populate</param>
            <param name="msgSize">Size of BCM Generic Message structure</param>
            <returns>The number of bytes read on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Read(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmGenericMessage32,System.Int32)">
            <summary>
            Read a BcmGenericMessage from the socket. Variant for 32-bit.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="message">BCM Generic Message structure to populate</param>
            <param name="msgSize">Size of BCM Generic Message structure</param>
            <returns>The number of bytes read on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Read(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmCanFdMessage,System.Int32)">
            <summary>
            Read a BcmCanFdMessage from the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="message">BCM CAN Message structure to populate</param>
            <param name="msgSize">Size of BCM CAN FD Message structure</param>
            <returns>The number of bytes read on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Read(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmCanMessage32,System.Int32)">
            <summary>
            Read a BcmCanMessage from the socket. Variant for 32-bit.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="message">BCM CAN Message structure to populate</param>
            <param name="msgSize">Size of BCM CAN Message structure</param>
            <returns>The number of bytes read on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Read(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.BcmCanFdMessage32,System.Int32)">
            <summary>
            Read a BcmCanFdMessage from the socket. Variant for 32-bit.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="message">BCM CAN Message structure to populate</param>
            <param name="msgSize">Size of BCM CAN FD Message structure</param>
            <returns>The number of bytes read on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Read(SocketCANSharp.SafeFileDescriptorHandle,System.Byte[],System.Int32)">
            <summary>
            Read a byte array from the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="data">Byte array to populate</param>
            <param name="dataSize">Size of byte array</param>
            <returns>The number of bytes read on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.RecvFrom(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.CanFrame@,System.Int32,SocketCANSharp.MessageFlags,SocketCANSharp.SockAddrCan,System.Int32@)">
            <summary>
            Receive a CanFrame from a socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="frame">CAN Frame structure</param>
            <param name="frameSize">Size of CAN Frame structure</param>
            <param name="flags">Message Flags</param>
            <param name="addr">The SocketCAN base source address</param>
            <param name="addrSize">The size of the SocketCAN base address</param>
            <returns>The number of bytes read on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.RecvFrom(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.CanFdFrame@,System.Int32,SocketCANSharp.MessageFlags,SocketCANSharp.SockAddrCan,System.Int32@)">
            <summary>
            Receive a CanFdFrame from a socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="frame">CAN FD Frame structure</param>
            <param name="frameSize">Size of CAN FD Frame structure</param>
            <param name="flags">Message Flags</param>
            <param name="addr">The SocketCAN base source address</param>
            <param name="addrSize">The size of the SocketCAN base address</param>
            <returns>The number of bytes read on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.RecvFrom(SocketCANSharp.SafeFileDescriptorHandle,System.Byte[],System.Int32,SocketCANSharp.MessageFlags,SocketCANSharp.SockAddrCanJ1939,System.Int32@)">
            <summary>
            Receive a byte array from a socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="data">Byte array</param>
            <param name="dataSize">Size of byte array</param>
            <param name="flags">Message Flags</param>
            <param name="addr">The SocketCAN J1939 source address</param>
            <param name="addrSize">The size of the SocketCAN J1939 address</param>
            <returns>The number of bytes read on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Recv(SocketCANSharp.SafeFileDescriptorHandle,System.Byte[],System.Int32,SocketCANSharp.MessageFlags)">
            <summary>
            Receive a byte array on a connected socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="data">Byte array</param>
            <param name="dataSize">Size of byte array</param>
            <param name="flags">Message Flags</param>
            <returns>The number of bytes read on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SendTo(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.CanFrame@,System.Int32,SocketCANSharp.MessageFlags,SocketCANSharp.SockAddrCan,System.Int32)">
            <summary>
            Transmit a CanFrame to another socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="frame">CAN Frame structure</param>
            <param name="frameSize">Size of CAN Frame structure</param>
            <param name="flags">Message Flags</param>
            <param name="addr">The SocketCAN base destination address</param>
            <param name="addrSize">The size of the SocketCAN base address</param>
            <returns>The number of bytes sent on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SendTo(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.CanFdFrame@,System.Int32,SocketCANSharp.MessageFlags,SocketCANSharp.SockAddrCan,System.Int32)">
            <summary>
            Transmit a CanFdFrame to another socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="frame">CAN FD Frame structure</param>
            <param name="frameSize">Size of CAN FD Frame structure</param>
            <param name="flags">Message Flags</param>
            <param name="addr">The SocketCAN base destination address</param>
            <param name="addrSize">The size of the SocketCAN base address</param>
            <returns>The number of bytes sent on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SendTo(SocketCANSharp.SafeFileDescriptorHandle,System.Byte[],System.Int32,SocketCANSharp.MessageFlags,SocketCANSharp.SockAddrCanJ1939,System.Int32)">
            <summary>
            Transmit a byte array to another socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="data">Byte array</param>
            <param name="dataSize">Size of byte array</param>
            <param name="flags">Message Flags</param>
            <param name="addr">The SocketCAN J1939 destination address</param>
            <param name="addrSize">The size of the SocketCAN J1939 address</param>
            <returns>The number of bytes sent on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Send(SocketCANSharp.SafeFileDescriptorHandle,System.Byte[],System.Int32,SocketCANSharp.MessageFlags)">
            <summary>
            Transmit a byte array to another socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="data">Byte array</param>
            <param name="dataSize">Size of byte array</param>
            <param name="flags">Message Flags</param>
            <returns>The number of bytes sent on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanSocketOptions,System.UInt32@,System.Int32)">
            <summary>
            Set the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_RAW socket handle</param>
            <param name="socketLevel">SOL_CAN_RAW</param>
            <param name="optionName">SOL_CAN_RAW socket option</param>
            <param name="optionValue">Unsigned integer value</param>
            <param name="optionValueSize">Size of unsigned interger</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanSocketOptions,System.UInt32@,System.Int32@)">
            <summary>
            Get the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_RAW socket handle</param>
            <param name="socketLevel">SOL_CAN_RAW</param>
            <param name="optionName">SOL_CAN_RAW socket option</param>
            <param name="optionValue">Unsigned integer value</param>
            <param name="optionValueSize">Size of an unsigned integer</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanSocketOptions,SocketCANSharp.CanFilter[],System.Int32)">
            <summary>
            Set the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_RAW socket handle</param>
            <param name="socketLevel">SOL_CAN_RAW</param>
            <param name="optionName">SOL_CAN_RAW socket option</param>
            <param name="filters">Array of CAN Filters</param>
            <param name="optionValueSize">Size of CAN Filter Array in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanSocketOptions,SocketCANSharp.CanFilter[],System.Int32@)">
            <summary>
            Get the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_RAW socket handle</param>
            <param name="socketLevel">SOL_CAN_RAW</param>
            <param name="optionName">SOL_CAN_RAW socket option</param>
            <param name="filters">Array of CAN Filters</param>
            <param name="optionValueSize">Size of CAN Filter Array in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanSocketOptions,System.Int32@,System.Int32)">
            <summary>
            Set the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_RAW socket handle</param>
            <param name="socketLevel">SOL_CAN_RAW</param>
            <param name="optionName">SOL_CAN_RAW socket option</param>
            <param name="optionValue">Signed Integer Value</param>
            <param name="optionValueSize">Size of signed integer</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanSocketOptions,System.Int32@,System.Int32@)">
            <summary>
            Get the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_RAW socket handle</param>
            <param name="socketLevel">SOL_CAN_RAW</param>
            <param name="optionName">SOL_CAN_RAW socket option</param>
            <param name="optionValue">Signed Integer Value</param>
            <param name="optionValueSize">Size of signed integer</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.SocketLevelOptions,System.Int32@,System.Int32)">
            <summary>
            Set the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">Socket handle</param>
            <param name="socketLevel">SOL_SOCKET</param>
            <param name="optionName">SOL_SOCKET socket option</param>
            <param name="optionValue">Signed Integer Value</param>
            <param name="optionValueSize">Size of signed integer</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.SocketLevelOptions,System.Int32@,System.Int32@)">
            <summary>
            Get the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">Socket handle</param>
            <param name="socketLevel">SOL_SOCKET</param>
            <param name="optionName">SOL_SOCKET socket option</param>
            <param name="optionValue">Signed Integer Value</param>
            <param name="optionValueSize">Size of signed integer</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.SocketLevelOptions,SocketCANSharp.Timeval,System.Int32)">
            <summary>
            Set the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">Socket handle</param>
            <param name="socketLevel">SOL_SOCKET</param>
            <param name="optionName">SOL_SOCKET socket option</param>
            <param name="timeval">Time interval object</param>
            <param name="optionValueSize">Size of Time interval object in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.SocketLevelOptions,SocketCANSharp.Timeval,System.Int32@)">
            <summary>
            Get the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">Socket handle</param>
            <param name="socketLevel">SOL_SOCKET</param>
            <param name="optionName">SOL_SOCKET socket option</param>
            <param name="timeval">Time interval object</param>
            <param name="optionValueSize">Size of Time interval object in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanIsoTpSocketOptions,System.UInt32@,System.Int32)">
            <summary>
            Set the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_ISOTP Socket handle</param>
            <param name="socketLevel">SOL_CAN_ISOTP</param>
            <param name="optionName">SOL_CAN_ISOTP socket option</param>
            <param name="optionValue">Unsigned Integer Value</param>
            <param name="optionValueSize">Size of unsigned integer</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanIsoTpSocketOptions,System.UInt32@,System.Int32@)">
            <summary>
            Get the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_ISOTP Socket handle</param>
            <param name="socketLevel">SOL_CAN_ISOTP</param>
            <param name="optionName">SOL_CAN_ISOTP socket option</param>
            <param name="optionValue">Unsigned Integer Value</param>
            <param name="optionValueSize">Size of unsigned integer</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanIsoTpSocketOptions,SocketCANSharp.CanIsoTpFlowControlOptions,System.Int32)">
            <summary>
            Set the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_ISOTP Socket handle</param>
            <param name="socketLevel">SOL_CAN_ISOTP</param>
            <param name="optionName">SOL_CAN_ISOTP socket option</param>
            <param name="fcOptions">ISO-TP Flow Control Options object</param>
            <param name="optionValueSize">Size of ISO-TP Flow Control Options object in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanIsoTpSocketOptions,SocketCANSharp.CanIsoTpFlowControlOptions,System.Int32@)">
            <summary>
            Get the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_ISOTP Socket handle</param>
            <param name="socketLevel">SOL_CAN_ISOTP</param>
            <param name="optionName">SOL_CAN_ISOTP socket option</param>
            <param name="fcOptions">ISO-TP Flow Control Options object</param>
            <param name="optionValueSize">Size of ISO-TP Flow Control Options object in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanIsoTpSocketOptions,SocketCANSharp.CanIsoTpLinkLayerOptions,System.Int32)">
            <summary>
            Set the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_ISOTP Socket handle</param>
            <param name="socketLevel">SOL_CAN_ISOTP</param>
            <param name="optionName">SOL_CAN_ISOTP socket option</param>
            <param name="llOptions">ISO-TP Link Layer Options object</param>
            <param name="optionValueSize">Size of ISO-TP Link Layer Options object in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanIsoTpSocketOptions,SocketCANSharp.CanIsoTpLinkLayerOptions,System.Int32@)">
            <summary>
            Get the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_ISOTP Socket handle</param>
            <param name="socketLevel">SOL_CAN_ISOTP</param>
            <param name="optionName">SOL_CAN_ISOTP socket option</param>
            <param name="llOptions">ISO-TP Link Layer Options object</param>
            <param name="optionValueSize">Size of ISO-TP Link Layer Options object in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanIsoTpSocketOptions,SocketCANSharp.CanIsoTpOptions,System.Int32)">
            <summary>
            Set the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_ISOTP Socket handle</param>
            <param name="socketLevel">SOL_CAN_ISOTP</param>
            <param name="optionName">SOL_CAN_ISOTP socket option</param>
            <param name="tpOptions">ISO-TP Options object</param>
            <param name="optionValueSize">Size of ISO-TP Options object in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanIsoTpSocketOptions,SocketCANSharp.CanIsoTpOptions,System.Int32@)">
            <summary>
            Get the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_ISOTP Socket handle</param>
            <param name="socketLevel">SOL_CAN_ISOTP</param>
            <param name="optionName">SOL_CAN_ISOTP socket option</param>
            <param name="tpOptions">ISO-TP Options object</param>
            <param name="optionValueSize">Size of ISO-TP Options object in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.J1939SocketOptions,System.Int32@,System.Int32)">
            <summary>
            Set the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_J1939 Socket handle</param>
            <param name="socketLevel">SOL_CAN_J1939</param>
            <param name="optionName">SOL_CAN_J1939 socket option</param>
            <param name="optionValue">Signed Integer Value</param>
            <param name="optionValueSize">Size of signed integer</param>
            <returns>0 or 1 on success depending on option name and value, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.J1939SocketOptions,System.Int32@,System.Int32@)">
            <summary>
            Get the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_J1939 Socket handle</param>
            <param name="socketLevel">SOL_CAN_J1939</param>
            <param name="optionName">SOL_CAN_J1939 socket option</param>
            <param name="optionValue">Signed Integer Value</param>
            <param name="optionValueSize">Size of signed integer</param>
            <returns>0 or 1 on success depending on option name and value, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.J1939SocketOptions,SocketCANSharp.J1939Filter[],System.Int32)">
            <summary>
            Set the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_J1939 Socket handle</param>
            <param name="socketLevel">SOL_CAN_J1939</param>
            <param name="optionName">SOL_CAN_J1939 socket option</param>
            <param name="filters">Array of J1939 Filters</param>
            <param name="optionValueSize">Size of array of J1939 Filters in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.J1939SocketOptions,SocketCANSharp.J1939Filter[],System.Int32@)">
            <summary>
            Get the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_J1939 Socket handle</param>
            <param name="socketLevel">SOL_CAN_J1939</param>
            <param name="optionName">SOL_CAN_J1939 socket option</param>
            <param name="filters">Array of J1939 Filters</param>
            <param name="optionValueSize">Size of array of J1939 Filters in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Set the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">Socket handle</param>
            <param name="socketLevel">Socket level</param>
            <param name="optionName">Socket option</param>
            <param name="optionValue">Pointer to option value</param>
            <param name="optionValueSize">Size of the buffer pointed to by optionValue</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            Get the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">Socket handle</param>
            <param name="socketLevel">Socket level</param>
            <param name="optionName">Socket option</param>
            <param name="optionValue">Pointer to option value</param>
            <param name="optionValueSize">Size of the buffer pointed to by optionValue</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.SetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanSocketOptions,SocketCANSharp.CanRawVcidOptions,System.Int32)">
            <summary>
            Set the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_RAW socket handle</param>
            <param name="socketLevel">SOL_CAN_RAW</param>
            <param name="optionName">SOL_CAN_RAW socket option</param>
            <param name="optionValue">VCID Options object</param>
            <param name="optionValueSize">Size of VCID Options object in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockOpt(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SocketLevel,SocketCANSharp.CanSocketOptions,SocketCANSharp.CanRawVcidOptions,System.Int32@)">
            <summary>
            Get the socket option specified by the option name and socket level to the provided option value for the supplied socket.
            </summary>
            <param name="socketHandle">CAN_RAW Socket handle</param>
            <param name="socketLevel">SOL_CAN_RAW</param>
            <param name="optionName">SOL_CAN_RAW socket option</param>
            <param name="optionValue">VCID Options object</param>
            <param name="optionValueSize">Size of VCID Options object in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.IfNameIndex">
            <summary>
            Returns a pointer to an array of IfNameIndex objects. Each IfNameIndex object includes information about one of the network interfaces on the local system.
            </summary>
            <returns>Pointer to an array of IfNameIndex objects</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.IfFreeNameIndex(System.IntPtr)">
            <summary>
            Frees the dynamically allocated data structure returned by IfNameIndex().
            </summary>
            <param name="ptr">Pointer to an array of IfNameIndex objects</param>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.EpollCreate(System.Int32)">
            <summary>
            Opens an epoll file descriptor.
            </summary>
            <param name="size">The size argument is ignored since Linux 2.6.8, but must be greater than zero for backwards compatibility. 
            Originally, this argument was intended as a hint to the kernel as to the number of file descriptors that the caller expected to add to the epoll instance.</param>
            <returns>On success, returns a valid file descriptor handle. On failure, returns an invalid file descriptor handle.</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.EpollControl(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.EpollOperation,SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.EpollEvent@)">
            <summary>
            Control interface used to add, modify, and delete entries from the interest list of an epoll file descriptor.
            </summary>
            <param name="epfd">Epoll File Descriptor.</param>
            <param name="op">Operation to be performed.</param>
            <param name="fd">Target file descriptor.</param>
            <param name="evnt">Event object linked to the targeted file descriptor.</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.EpollWait(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.EpollEvent[],System.Int32,System.Int32)">
            <summary>
            Waits for an I/O event on an epoll file descriptor.
            </summary>
            <param name="epfd">Epoll File Descriptor.</param>
            <param name="events">A buffer that contains information from the ready lists about file descriptors in the interest list that have some event(s) available.</param>
            <param name="maxEvents">Maximum number of events to wait for.</param>
            <param name="timeout">The maximum number of milliseconds that the function call will block for. Set to 0 to return immediately, set to -1 to wait indefinitely.</param>
            <returns>Returns the number of file descriptors ready for the requested I/O. Returns -1 on failure.</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.Close(System.IntPtr)">
            <summary>
            Closes a file descriptor.
            </summary>
            <param name="fd">File descriptor to close.</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockName(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SockAddrCan,System.Int32@)">
            <summary>
            Returns the current address to which the socket is bound to.
            </summary>
            <param name="socketHandle">Socket handle</param>
            <param name="sockAddr">Address structure</param>
            <param name="sockAddrLen">The size of the the socket address structure in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockName(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SockAddrCanIsoTp,System.Int32@)">
            <summary>
            Returns the current address to which the socket is bound to.
            </summary>
            <param name="socketHandle">Socket handle</param>
            <param name="sockAddr">Address structure</param>
            <param name="sockAddrLen">The size of the the socket address structure in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetSockName(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SockAddrCanJ1939,System.Int32@)">
            <summary>
            Returns the current address to which the socket is bound to.
            </summary>
            <param name="socketHandle">Socket handle</param>
            <param name="sockAddr">Address structure</param>
            <param name="sockAddrLen">The size of the the socket address structure in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.GetPeerName(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.SockAddrCanJ1939,System.Int32@)">
            <summary>
            Returns the address of the peer to which the socket is connected to.
            </summary>
            <param name="socketHandle">Socket handle</param>
            <param name="sockAddr">Address structure</param>
            <param name="sockAddrLen">The size of the the socket address structure in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.RecvMsg(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.MessageHeader@,SocketCANSharp.MessageFlags)">
            <summary>
            Receive a MessageHeader from a socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="canMessage">Message Header</param>
            <param name="flags">Message Flags</param>
            <returns>The number of bytes received on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.IfNameToIndex(System.String)">
            <summary>
            Retrieves the index of the network interface corresponding to the specified name.
            </summary>
            <param name="name">Interface Name</param>
            <returns>Interface Index on success, 0 on failure</returns>
        </member>
        <member name="M:SocketCANSharp.LibcNativeMethods.IfIndexToName(System.UInt32,System.IntPtr)">
            <summary>
            Retrieves the name of the network interface corresponding to the specified index.
            </summary>
            <param name="index">Interface Index</param>
            <param name="namePtr">Pointer to the buffer where the Interface Name is set</param>
            <returns>Valid IntPtr pointing to a buffer containing the Interface Name on success, IntPtr.Zero (null) on failure.</returns>
        </member>
        <member name="T:SocketCANSharp.MessageHeader">
            <summary>
            Message header structure used by 'recvmsg' and 'sendmsg' functions.
            </summary>
        </member>
        <member name="P:SocketCANSharp.MessageHeader.Name">
            <summary>
            Address to send to or receive from depending on the function.
            </summary>
        </member>
        <member name="P:SocketCANSharp.MessageHeader.NameLength">
            <summary>
            Length of the address data.
            </summary>
        </member>
        <member name="P:SocketCANSharp.MessageHeader.IoVectors">
            <summary>
            IoVectors to send or receive into.
            </summary>
        </member>
        <member name="P:SocketCANSharp.MessageHeader.IoVectorCount">
            <summary>
            Number of IoVector structures.
            </summary>
        </member>
        <member name="F:SocketCANSharp.MessageHeader.ControlMessage">
            <summary>
            Ancillary Data element (Control Message).
            </summary>
        </member>
        <member name="P:SocketCANSharp.MessageHeader.ControlMessageLength">
            <summary>
            Size of the Ancillary Data element.
            </summary>
        </member>
        <member name="P:SocketCANSharp.MessageHeader.Flags">
            <summary>
            Message Flags.
            </summary>
        </member>
        <member name="M:SocketCANSharp.MessageHeader.ToString">
            <summary>
            Returns a string that represents the current MessageHeader object.
            </summary>
            <returns>A string that represents the current MessageHeader object.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.AbstractCanSocket">
            <summary>
            Provides the base implementation for CAN sockets.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.AbstractCanSocket.ProtocolType">
            <summary>
            The protocol type of the CAN socket.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.AbstractSocket">
            <summary>
            Provides the base implementation for sockets.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.AbstractSocket._disposed">
            <summary>
            Object disposed flag.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.AbstractSocket.SafeHandle">
            <summary>
            Represents the operating system handle exposed in a safe manner for the socket that the current AbstractSocket object encapsulates.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.AbstractSocket.Handle">
            <summary>
            Represents the operating system handle for the socket that is encapsulated by this object.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.AbstractSocket.SocketType">
            <summary>
            The type of socket.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.AbstractSocket.IsBound">
            <summary>
            Returns true if the socket is bound to a specific address; otherwise, false.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.AbstractSocket.Connected">
            <summary>
            Returns true if the socket is connected to an address as of the most recent operation; otherwise, false.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.AbstractSocket.SendBufferSize">
            <summary>
            An integer that contains the size, in bytes, of the send buffer.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.AbstractSocket.ReceiveBufferSize">
            <summary>
            An integer that contains the size, in bytes, of the receive buffer.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.AbstractSocket.SendTimeout">
            <summary>
            The amount of time in milliseconds after which a synchronous Send call will time out. A value of 0 represents waiting indefinitely.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.AbstractSocket.ReceiveTimeout">
            <summary>
            The amount of time in milliseconds after which a synchronous Receive call will time out. A value of 0 represents waiting indefinitely.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.AbstractSocket.EnableBroadcast">
            <summary>
            True if the socket allows the sending or receiving of broadcast packets; otherwise, false.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.AbstractSocket.Blocking">
            <summary>
            True if the Socket is in blocking mode; otherwise, false.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.AbstractSocket.Close">
            <summary>
            Closes the socket and releases all of the associated resources.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.AbstractSocket.Dispose">
            <summary>
            Releases all of the resources associated with the current instance of the AbstractSocket class.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.AbstractSocket.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the current instance of the AbstractSocket class, and optionally disposes of the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
        </member>
        <member name="T:SocketCANSharp.Network.BroadcastManagement.BcmCanMessageResponse">
            <summary>
            Broadcast Manager (BCM) CAN Message Response.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCanMessageResponse.FrameType">
            <summary>
            BCM CAN Frame Type.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCanMessageResponse.ResponseType">
            <summary>
            BCM Response Message Type.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCanMessageResponse.CyclicTransmissionTaskConfiguration">
            <summary>
            Cyclic Transmission Task Configuration which appears on TransmissionTaskConfiguration and FirstIntervalTransmissionComplete response types.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCanMessageResponse.ContentReceiveFilterSubscription">
            <summary>
            Content Receive Filter Configuration which appears on ReceiveFilterConfiguration, CyclicMessageReceiveTimeout, and CanFrameReceiveUpdateNotification response types.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCanMessageResponse.ClassicFrames">
            <summary>
            Classic CAN Frame Array.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCanMessageResponse.FdFrames">
            <summary>
            CAN FD Frame Array.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket">
            <summary>
            Provides Broadcast Manager CAN socket services.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket.#ctor">
            <summary>
            Initializes a new instance of the BcmCanSocket class.
            </summary>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to create the requested socket.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket.Connect(SocketCANSharp.SockAddrCan)">
            <summary>
            Sets the SocketCAN Base Address Structure on the CAN_BCM socket.
            </summary>
            <param name="addr">SocketCAN Base Address Structure.</param>
            <exception cref="T:System.ObjectDisposedException">The CAN_BCM socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">SocketCAN Base Address Structure is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to set the provided SocketCAN Base Address Structure on the CAN_BCM socket.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket.Connect(SocketCANSharp.Network.CanNetworkInterface)">
            <summary>
            Sets the CAN Network Interface Index on the CAN_BCM socket.
            </summary>
            <param name="iface">CAN Network Interface instance containing the name and index of the interface.</param>
            <exception cref="T:System.ArgumentNullException">CanNetworkInterface instance is null.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket.CreateCyclicTransmissionTask(SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration,SocketCANSharp.CanFrame[])">
            <summary>
            Creates a cyclic transmission task on the Broadcast Manager socket.
            </summary>
            <param name="taskConfiguration">Cylic Transmission Task Configuration</param>
            <param name="frames">CAN Frames to transmit</param>
            <returns>Number of bytes written to the Broadcast Manager socket.</returns>
            <exception cref="T:System.ArgumentNullException">CAN Frame Array or BcmCyclicTxTaskConfiguration instance is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to create the requested task.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket.CreateCyclicTransmissionTask(SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration,SocketCANSharp.CanFdFrame[])">
            <summary>
            Creates a cyclic transmission task on the Broadcast Manager Socket.
            </summary>
            <param name="taskConfiguration">Cyclic Transmission Task Configuration</param>
            <param name="frames">CAN FD Frames to transmit</param>
            <returns>Number of bytes written to the Broadcast Manager socket.</returns>
            <exception cref="T:System.ArgumentNullException">CAN FD Frame Array or BcmCyclicTxTaskConfiguration instance is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to create the requested task.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket.RemoveCyclicTransmissionTask(System.UInt32,SocketCANSharp.Network.BroadcastManagement.BcmCanFrameType)">
            <summary>
            Removes a cyclic transmission task from the Broadcast Manager socket.
            </summary>
            <param name="id">Task ID (CAN ID).</param>
            <param name="canFrameType">BCM CAN Frame Type.</param>
            <returns>Number of bytes written to the Broadcast Manager socket.</returns>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to remove the requested task.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket.QueueCyclicTransmissionTaskProperties(System.UInt32,SocketCANSharp.Network.BroadcastManagement.BcmCanFrameType)">
            <summary>
            Requests the queuing of the properties of a cyclic transmission task associated with the provided Task ID (CAN ID) from the Broadcast Manager socket.
            </summary>
            <param name="id">Task ID to look up the properties of.</param>
            <param name="canFrameType">BCM CAN Frame Type.</param>
            <returns>Number of bytes written to the Broadcast Manager socket.</returns>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Failed to write the read cyclic transmission task properties request to the socket.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket.Read(SocketCANSharp.Network.BroadcastManagement.BcmCanMessageResponse@)">
            <summary>
            Reads a BCM message from the socket into the response object.
            </summary>
            <param name="bcmCanMessageResponse">BCM Message Response</param>
            <returns>Number of bytes read from the Broadcast Manager socket.</returns>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to retrieve information from the socket.</exception>
            <exception cref="T:System.IO.IOException">Unexpected/Unsupported BCM Socket Response Type</exception>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket.SendSingleFrame(SocketCANSharp.CanFrame)">
            <summary>
            Writes a single CAN Frame to the Broadcast Manager socket.
            </summary>
            <param name="canFrame">CAN Frame</param>
            <returns>Number of bytes written to the socket</returns>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to write the CAN Frame to the socket.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket.SendSingleFrame(SocketCANSharp.CanFdFrame)">
            <summary>
            Writes a single CAN FD Frame to the Broadcast Manager socket.
            </summary>
            <param name="canFrame">CAN FD Frame</param>
            <returns>Number of bytes written to the socket.</returns>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to write the CAN FD Frame to the socket.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket.CreateReceiveFilterSubscription(SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription,SocketCANSharp.CanFrame[])">
            <summary>
            Creates a receive filter subscription on the Broadcast Manager Socket.
            </summary>
            <param name="filterSubscription">Receive Filter Subscription</param>
            <param name="frames">CAN Frames Array</param>
            <returns>Number of bytes written to the socket.</returns>
            <exception cref="T:System.ArgumentNullException">CAN Frame Array or BcmContentRxFilterSubscription instance is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to set up content receive filter subscription.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket.CreateReceiveFilterSubscription(SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription,SocketCANSharp.CanFdFrame[])">
            <summary>
            Creates a receive filter subscription on the Broadcast Manager Socket.
            </summary>
            <param name="filterSubscription">Receive Filter Subscription</param>
            <param name="frames">CAN FD Frames Array</param>
            <returns>Number of bytes written to the socket.</returns>
            <exception cref="T:System.ArgumentNullException">CAN FD Frame Array or BcmContentRxFilterSubscription instance is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to set up content receive filter subscription.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket.RemoveReceiveFilterSubscription(System.UInt32,SocketCANSharp.Network.BroadcastManagement.BcmCanFrameType)">
            <summary>
            Removes a receive filter subscription from the Broadcast Manager socket.
            </summary>
            <param name="id">Filter ID.</param>
            <param name="canFrameType">BCM CAN Frame Type.</param>
            <returns>Number of bytes written to the Broadcast Manager socket.</returns>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to remove receive filter subscription.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCanSocket.QueueReceiveFilterSubscriptionProperties(System.UInt32,SocketCANSharp.Network.BroadcastManagement.BcmCanFrameType)">
            <summary>
            Requests the queuing of the properties of a content receive filter subscription associated with the provided CAN ID from the Broadcast Manager socket.
            </summary>
            <param name="id">Filter ID to look up the properties of.</param>
            <param name="canFrameType">BCM CAN Frame Type.</param>
            <returns>Number of bytes written to the Broadcast Manager socket.</returns>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Failed to write the read subscription properties request to the socket.</exception>
        </member>
        <member name="T:SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription">
            <summary>
            Content receive filter subscription for the Broadcast Manager (BCM).
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription.Id">
            <summary>
            Filter ID (CAN ID).
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription.SetInterval">
            <summary>
            Set interval related information.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription.StartTimer">
            <summary>
            Start timer and immediately begin monitoring for reception timeouts.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription.FilterOnlyByCanId">
            <summary>
            Filter only by CAN ID.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription.MonitorLengthChanges">
            <summary>
            Monitor for Length Changes in the Frame.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription.PreventAutoStartingReceiveTimer">
            <summary>
            Prevents the automatic starting of the receive timer.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription.NotifyWhenReceiveRestartsAfterTimeout">
            <summary>
            Send a notification when monitored CAN frames return after a receive timeout.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription.ReplyToRtrRequest">
            <summary>
            Send a reply to a RTR-request.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription.ReceiveTimeout">
            <summary>
            Timeout for when a frame is not received within a certain interval of time.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription.ReceiveMessageRateLimit">
            <summary>
            Used to throttle the number of received messages to the specified rate limit.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription.#ctor">
            <summary>
            Initializes a new instance of the BcmContentRxFilterSubscription class with default values.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription.#ctor(System.UInt32,SocketCANSharp.BcmFlags,SocketCANSharp.BcmTimeval,SocketCANSharp.BcmTimeval)">
            <summary>
            Initializes a new instance of the BcmContentRxFilterSubscription class using the supplied parameters.
            </summary>
            <param name="id">Filter ID (CAN ID)</param>
            <param name="flags">Raw BcmFlags</param>
            <param name="receiveTimeout">Receive Timeout</param>
            <param name="messageRateLimit">Receive Message Rate Limit</param>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmContentRxFilterSubscription.GetBcmFlags">
            <summary>
            Calculates the raw BCM Flags using the current object state.
            </summary>
            <returns>Raw BCM Flags based on the current object state.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration">
            <summary>
            Cyclic Transmission Task configuration for the Broadcast Manager (BCM).
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration.Id">
            <summary>
            Task ID (CAN ID)
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration.SetInterval">
            <summary>
            Set interval related information.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration.StartTimer">
            <summary>
            Start timer and immediately start transmitting.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration.NotifyWhenFirstIntervalComplete">
            <summary>
            Send notification when first interval is complete.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration.ImmediatelyQueueNewFrame">
            <summary>
            Immediately Queue New CAN Frame
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration.CopyCanIdInHeaderToEachCanFrame">
            <summary>
            Copies the CAN ID in the Header to each CAN Frame in the sequence.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration.RestartMultipleFrameTxAtIndexZero">
            <summary>
            Starts Multiple Frame Transmission at Index 0.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration.InitialIntervalConfiguration">
            <summary>
            Initial Interval Configuration.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration.PostInitialInterval">
            <summary>
            Post-Initial Interval Configuration.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration.#ctor">
            <summary>
            Initializes a new instance of the BcmCyclicTxTaskConfiguration class with default values.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration.#ctor(System.UInt32,SocketCANSharp.BcmFlags,System.UInt32,SocketCANSharp.BcmTimeval,SocketCANSharp.BcmTimeval)">
            <summary>
            Initializes a new instance of the BcmCyclicTxTaskConfiguration class using the supplied parameters.
            </summary>
            <param name="id">Task ID (CAN ID)</param>
            <param name="flags">Raw BcmFlags</param>
            <param name="count">The number of frames to send at the initial rate</param>
            <param name="initInterval">The initial interval rate</param>
            <param name="postInitInterval">The post-initial interval rate</param>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmCyclicTxTaskConfiguration.GetBcmFlags">
            <summary>
            Calculates the raw BCM Flags using the current object state.
            </summary>
            <returns>Raw BCM Flags based on the current object state.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.BroadcastManagement.BcmInitialIntervalConfiguration">
            <summary>
            The initial interval configuration for the Broadcast Manager (BCM).
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmInitialIntervalConfiguration.Count">
            <summary>
            The number of CAN Frames to send at the initial interval rate.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.BroadcastManagement.BcmInitialIntervalConfiguration.Interval">
            <summary>
            The interval rate at which to send the initial set of CAN Frames represented by the Count property.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmInitialIntervalConfiguration.#ctor(System.Int32,SocketCANSharp.BcmTimeval)">
            <summary>
            Initializes a new instance of the BcmInitialIntervalConfiguration class.
            </summary>
            <param name="count">The number of CAN Frames to send at the initial interval rate.</param>
            <param name="interval">The interval rate at which to send the initial set of CAN Frames represented by the Count property.</param>
        </member>
        <member name="M:SocketCANSharp.Network.BroadcastManagement.BcmInitialIntervalConfiguration.#ctor">
            <summary>
            Initializes a new instance of the BcmInitialIntervalConfiguration class with default values.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.BroadcastManagement.BcmResponseType">
            <summary>
            BCM Message Response Type.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.BroadcastManagement.BcmResponseType.TransmissionTaskConfiguration">
            <summary>
            Transmission Task Configuration.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.BroadcastManagement.BcmResponseType.FirstIntervalTransmissionComplete">
            <summary>
            Indication that the initial interval of transmission has completed.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.BroadcastManagement.BcmResponseType.ReceiveFilterConfiguration">
            <summary>
            Receive Filter Configuration.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.BroadcastManagement.BcmResponseType.CyclicMessageReceiveTimeout">
            <summary>
            Cyclic Message Receive Timeout.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.BroadcastManagement.BcmResponseType.CanFrameReceiveUpdateNotification">
            <summary>
            CAN Frame content has been updated or received for the first time.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.BroadcastManagement.BcmCanFrameType">
            <summary>
            Broadcast Manager CAN Frame Type.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.BroadcastManagement.BcmCanFrameType.ClassicCAN">
            <summary>
            Classic CAN (2.0b) Frame Type.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.BroadcastManagement.BcmCanFrameType.CANFD">
            <summary>
            CAN Flexible Data-Rate (FD) Frame Type.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.CanNetworkInterface">
            <summary>
            Provides information about a CAN interface.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.CanNetworkInterface.Index">
            <summary>
            Index of the CAN interface.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.CanNetworkInterface.Name">
            <summary>
            Name of the CAN interface.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.CanNetworkInterface.IsVirtual">
            <summary>
            Indicates if the CAN interface is virtual or not.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.CanNetworkInterface.DeviceFlags">
            <summary>
            Device Flags.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.CanNetworkInterface.DeviceType">
            <summary>
            Device Type.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.CanNetworkInterface.BitTiming">
            <summary>
            Bit Timing of the CAN Network Interface.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.CanNetworkInterface.BitTimingConstant">
            <summary>
            Hardware-dependent Bit Timing of the CAN Network Interface.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.CanNetworkInterface.DataPhaseBitTiming">
            <summary>
            Data Phase Bit Timing of the CAN Network Interface.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.CanNetworkInterface.DataPhaseBitTimingConstant">
            <summary>
            Hardware-dependent Data Phase Bit Timing of the CAN Network Interface.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.CanNetworkInterface.OperationalStatus">
            <summary>
            Operational Status of the Interface (RFC2863 State).
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.CanNetworkInterface.LinkStatistics">
            <summary>
            Link Statistics.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.CanNetworkInterface.MaximumTransmissionUnit">
            <summary>
            Maximum Transmission Unit (MTU) of the interface.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.CanNetworkInterface.LinkKind">
            <summary>
            Link Kind (i.e., can or vcan).
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.CanNetworkInterface.DeviceStatistics">
            <summary>
            CAN Device Statistics.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.CanNetworkInterface.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the CanNetworkInterface class with the specified Index, Name and whether the interface is virtual or physical.
            </summary>
            <param name="index">Interface index</param>
            <param name="name">Interface name</param>
            <param name="isVirtual">If true, the interface is virtual. If false, the interface is physical.</param>
        </member>
        <member name="M:SocketCANSharp.Network.CanNetworkInterface.GetAllInterfaces(System.Boolean)">
            <summary>
            Retrieves all CAN interfaces connected on the local system and optionally virtual interfaces as well.
            </summary>
            <param name="includeVirtual">Indicates whether virtual interfaces should be included or not.</param>
            <returns>Collection of CAN interfaces on the local system</returns>
        </member>
        <member name="M:SocketCANSharp.Network.CanNetworkInterface.GetInterfaceByName(SocketCANSharp.SafeFileDescriptorHandle,System.String)">
            <summary>
            Looks up and creates a CanNetworkInterface instance from the interface name.
            </summary>
            <param name="socketHandle">Socket Handle</param>
            <param name="interfaceName">Interface Name</param>
            <returns>CanNetworkInterface instance with the corresponding name.</returns>
            <exception cref="T:System.ArgumentNullException">Socket Handle is null.</exception>
            <exception cref="T:System.ArgumentException">Socket Handle is closed or invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Interface Name is null, empty, or only whitespace characters.</exception>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Failed to look up interface by name.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.CanNetworkInterface.GetInterfaceByIndex(SocketCANSharp.SafeFileDescriptorHandle,System.Int32)">
            <summary>
            Looks up and creates a CanNetworkInterface instance from the interface index.
            </summary>
            <param name="socketHandle">Socket Handle</param>
            <param name="interfaceIndex">Interface Index</param>
            <returns>CanNetworkInterface instance with the corresponding index.</returns>
            <exception cref="T:System.ArgumentNullException">Socket Handle is null.</exception>
            <exception cref="T:System.ArgumentException">Socket Handle is closed or invalid.</exception>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Failed to look up interface by index.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.CanNetworkInterface.ReadSupportedMtu(SocketCANSharp.SafeFileDescriptorHandle)">
            <summary>
            Retreives the Maximum Transmission Unit (MTU) of the interface.
            </summary>
            <param name="socketHandle">Socket Handle</param>
            <returns>Maximum Transmission Unit of the interface.</returns>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Unable to retreive MTU size information for the interface.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.CanNetworkInterface.ToString">
            <summary>
            Returns a string that represents the current CanNetworkInterface object.
            </summary>
            <returns>A string that represents the current CanNetworkInterface object.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Epoll">
            <summary>
            Provides I/O event notifications via an epoll instance.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Epoll._disposed">
            <summary>
            Object disposed flag.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Epoll.SafeHandle">
            <summary>
            Represents the operating system handle exposed in a safe manner for the epoll file descriptor that the current Epoll object encapsulates.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Epoll.Handle">
            <summary>
            Represents the operating system handle for the epoll file descriptor that is encapsulated by this object.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Epoll.#ctor">
            <summary>
            Initializes a new instance of the epoll class.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">Failed to create a new epoll instance.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Epoll.Add(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.EpollEvent)">
            <summary>
            Adds a socket handle to the interest list of the epoll file descriptor along with settings.
            </summary>
            <param name="socketHandle">Socket Handle to add to the interest list.</param>
            <param name="eventSettings">Settings associated with the socket handle.</param>
            <exception cref="T:System.ObjectDisposedException">Epoll file descriptor is closed.</exception>
            <exception cref="T:System.ArgumentNullException">Socket handle is null.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">The epoll_ctl call failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Epoll.Modify(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.EpollEvent)">
            <summary>
            Modifies the existing settings associated with a socket handle in the interest list with new settings.
            </summary>
            <param name="socketHandle">Socket handle currently in the interest list to update.</param>
            <param name="eventSettings">New seetings to associated eweith the socket handle.</param>
            <exception cref="T:System.ObjectDisposedException">Epoll file descriptor is closed.</exception>
            <exception cref="T:System.ArgumentNullException">Socket handle is null.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">The epoll_ctl call failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Epoll.Remove(SocketCANSharp.SafeFileDescriptorHandle)">
            <summary>
            Removes the socket handle from the interest list.
            </summary>
            <param name="socketHandle">Socket handle currently in the interest list to remove.</param>
            <exception cref="T:System.ObjectDisposedException">Epoll file descriptor is closed.</exception>
            <exception cref="T:System.ArgumentNullException">Socket handle is null.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">The epoll_ctl call failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Epoll.Wait(System.Int32,System.Int32)">
            <summary>
            Waits for an I/O event on the underlying epoll instance.
            </summary>
            <param name="maxEvents">The maximum number of events to wait for.</param>
            <param name="timeout">The maximum number of milliseconds that the call will block.</param>
            <returns>Array of event information for the file descriptors in the interest list that have some events available and are thus in the ready list.</returns>
            <exception cref="T:System.ObjectDisposedException">The epoll file descriptor is closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Maximum number of events must be greater than 0.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">The epoll_wait call failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Epoll.Close">
            <summary>
            Closes the epoll instance and releases all of the associated resources.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Epoll.Dispose">
            <summary>
            Releases all of the resources associated with the current instance of the Epoll class.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Epoll.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the current instance of the Epoll class, and optionally disposes of the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
        </member>
        <member name="T:SocketCANSharp.Network.IsoTpCanSocket">
            <summary>
            Provides ISO-TP (ISO 15765-2) over CAN socket services.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.IsoTpCanSocket.Address">
            <summary>
            The current address to which this socket is bound.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.IsoTpCanSocket.BaseOptions">
            <summary>
            Base options for ISO-TP including Extended Addresses, Pad Bytes, Transmit Timing, and various configuration flags.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.IsoTpCanSocket.FlowControlOptions">
            <summary>
            Flow Control settings for the ISO-TP conversation (BlockSize, STmin, and Maximum WAIT FC Frame tolerance).
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.IsoTpCanSocket.TransmitStmin">
            <summary>
            Time in nano secs to use for STmin instead of the value provided in the FC frame from the receiver.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.IsoTpCanSocket.ReceiveStmin">
            <summary>
            Time in nano secs to use for STmin and ignore received CF frames which timestamps differ less than this value.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.IsoTpCanSocket.LinkLayerOptions">
            <summary>
            Link Layer settings for the ISO-TP conversation (MTU, Frame Size, and flags specific to CAN FD).
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.IsoTpCanSocket.#ctor">
            <summary>
            Initializes a new instance of the IsoTpCanSocket class.
            </summary>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to create the requested socket</exception>
        </member>
        <member name="M:SocketCANSharp.Network.IsoTpCanSocket.Bind(SocketCANSharp.SockAddrCanIsoTp)">
            <summary>
            Assigns the ISO-TP Address Structure to the CAN_ISOTP socket.
            </summary>
            <param name="addr"></param>
            <exception cref="T:System.ObjectDisposedException">The CAN_ISOTP socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">ISO-TP Address Structure is null</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to assign the provided ISO-TP Address Structure to the CAN_ISOTP socket.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.IsoTpCanSocket.Bind(SocketCANSharp.Network.CanNetworkInterface,System.UInt32,System.UInt32)">
            <summary>
            Assigns the CAN Network Interface Index, Transmit CAN ID, and Receive CAN ID to the CAN_ISOTP socket.
            </summary>
            <param name="iface">CAN Network Interface instance containing the name and index of the interface.</param>
            <param name="txId">Transmit CAN ID. Usually a tester will send requests to an ECU using this CAN ID.</param>
            <param name="rxId">Receive CAN ID. Usually an ECU will send responses to a tester request using this CAN ID.</param>
            <exception cref="T:System.ArgumentNullException">CanNetworkInterface instance is null.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.IsoTpCanSocket.Write(System.Byte[])">
            <summary>
            Writes the supplied data to the socket.
            </summary>
            <param name="data">An array of bytes that contains the data to be sent.</param>
            <returns>The number of bytes written to the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">The data byte array is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Writing to the underlying CAN_ISOTP socket failed</exception>
        </member>
        <member name="M:SocketCANSharp.Network.IsoTpCanSocket.Read(System.Byte[])">
            <summary>
            Reads data from the socket into the supplied receive buffer.
            </summary>
            <param name="data">An array of bytes that is the receive buffer</param>
            <returns>The number of bytes received from the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">The data byte array is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Reading from the underlying CAN_ISOTP socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.IsoTpCanSocket.Read(System.Byte[],SocketCANSharp.MessageFlags)">
            <summary>
            Reads data from the socket into the supplied receive buffer using the supplied message flags.
            </summary>
            <param name="data">An array of bytes that is the receive buffer.</param>
            <param name="messageFlags">Specifies socket receive behavior.</param>
            <returns>The number of bytes received from the socket or the real length of packet / datagram in the case of MSG_TRUNC being used.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">The data byte array is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Reading from the underlying CAN_ISOTP socket failed.</exception>
        </member>
        <member name="T:SocketCANSharp.Network.J1939CanSocket">
            <summary>
            Provides SAE J1939 over CAN socket services.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.J1939CanSocket.LocalAddress">
            <summary>
            The current address to which this socket is bound.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.J1939CanSocket.RemoteAddress">
            <summary>
            The current address to which this socket is connected.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.J1939CanSocket.J1939Filters">
            <summary>
            J1939 Filters to control the reception of J1939 messages.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.J1939CanSocket.EnablePromiscuousMode">
            <summary>
            True if the J1939 socket is in promiscuous mode; otherwise, false.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.J1939CanSocket.SendPriority">
            <summary>
            Default send priority.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.J1939CanSocket.EnableErrorQueue">
            <summary>
            Indicates whether queued errors should be received from the socket error queue.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.J1939CanSocket.#ctor">
            <summary>
            Initializes a new instance of the J1939CanSocket class.
            </summary>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to create the requested socket</exception>
        </member>
        <member name="M:SocketCANSharp.Network.J1939CanSocket.Bind(SocketCANSharp.SockAddrCanJ1939)">
            <summary>
            Assigns the SAE J1939 Address Structure to the CAN_J1939 socket.
            </summary>
            <param name="addr">J1939 Socket Address structure</param>
            <exception cref="T:System.ObjectDisposedException">The CAN_J1939 socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">SAE J1939 Address Structure is null</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to assign the provided SAE J1939 Address Structure to the CAN_J1939 socket.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.J1939CanSocket.Bind(SocketCANSharp.Network.CanNetworkInterface,System.UInt64,System.UInt32,System.Byte)">
            <summary>
            Assigns the CAN Network Interface Index, 64-bit NAME, Parameter Group Number, and Address byte to the CAN_J1939 socket.
            </summary>
            <param name="iface">CAN Network Interface instance containing the name and index of the interface.</param>
            <param name="name">64-bit NAME value assigned to the J1939 node.</param>
            <param name="pgn">Parameter Group Number to use. The PGN is part of the 29-bit CAN ID used by the J1939 node.</param>
            <param name="address">Address byte associated to the J1939 node.</param>
            <exception cref="T:System.ArgumentNullException">CanNetworkInterface instance is null.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.J1939CanSocket.Connect(SocketCANSharp.SockAddrCanJ1939)">
            <summary>
            Connects the underlying CAN_J1939 socket to the specified SAE J1939 Address Structure.
            </summary>
            <param name="addr">The J1939 Socket Address structure to connect to.</param>
            <exception cref="T:System.ObjectDisposedException">The CAN_J1939 socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">SAE J1939 Address Structure is null</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to connect the CAN_J1939 socket to the provided SAE J1939 Address Structure.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.J1939CanSocket.Connect(SocketCANSharp.Network.CanNetworkInterface,System.UInt64,System.UInt32,System.Byte)">
            <summary>
            Connects the CAN Network Interface Index, 64-bit NAME, Parameter Group Number, and Address byte to the CAN_J1939 socket.
            </summary>
            <param name="iface">CAN Network Interface instance containing the name and index of the interface.</param>
            <param name="name">64-bit NAME value of the J1939 node that the socket is connected to.</param>
            <param name="pgn">Parameter Group Number of the J1939 node that the socket is connected to. The PGN is part of the 29-bit CAN ID used by the J1939 node.</param>
            <param name="address">Address byte associated with the J1939 node that the socket is connected to.</param>
            <exception cref="T:System.ArgumentNullException">CanNetworkInterface instance is null.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.J1939CanSocket.Write(System.Byte[])">
            <summary>
            Writes the supplied data to the socket.
            </summary>
            <param name="data">An array of bytes that contains the data to be sent.</param>
            <returns>The number of bytes written to the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">The data byte array is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Writing to the underlying CAN_J1939 socket failed</exception>
        </member>
        <member name="M:SocketCANSharp.Network.J1939CanSocket.Write(System.Byte[],SocketCANSharp.MessageFlags)">
            <summary>
            Writes the supplied data to the socket utilizing the specified flags.
            </summary>
            <param name="data">An array of bytes that contains the data to be sent.</param>
            <param name="messageFlags">Specifies send behavior</param>
            <returns>The number of bytes written to the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">The data byte array is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Writing to the underlying CAN_J1939 socket failed</exception>
        </member>
        <member name="M:SocketCANSharp.Network.J1939CanSocket.WriteTo(System.Byte[],SocketCANSharp.MessageFlags,SocketCANSharp.SockAddrCanJ1939)">
            <summary>
            Writes the supplied data on the socket to the target provided in the destination address structure utlizing the specified flags.
            </summary>
            <param name="data">An array of bytes that contains the data to be sent.</param>
            <param name="messageFlags">Specifies send behavior</param>
            <param name="destAddr">Target of the data transmission</param>
            <returns>The number of bytes written to the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">The data byte array is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Writing to the underlying CAN_J1939 socket failed</exception>
        </member>
        <member name="M:SocketCANSharp.Network.J1939CanSocket.Read(System.Byte[])">
            <summary>
            Reads data from the socket into the supplied receive buffer.
            </summary>
            <param name="data">An array of bytes that is the receive buffer</param>
            <returns>The number of bytes received from the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">The data byte array is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Reading from the underlying CAN_J1939 socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.J1939CanSocket.Read(System.Byte[],SocketCANSharp.MessageFlags)">
            <summary>
            Reads data from the socket into the supplied receive buffer utilizing the specified flags.
            </summary>
            <param name="data">An array of bytes that is the receive buffer</param>
            <param name="messageFlags">Specifies receive behavior</param>
            <returns>The number of bytes received from the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">The data byte array is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Reading from the underlying CAN_J1939 socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.J1939CanSocket.ReadFrom(System.Byte[],SocketCANSharp.MessageFlags,SocketCANSharp.SockAddrCanJ1939)">
            <summary>
            Reads data from the socket into the supplied receive buffer utilizing the specified flags and additionally identifies the source of the received data.
            </summary>
            <param name="data">An array of bytes that is the receive buffer</param>
            <param name="messageFlags">Specifies receive behavior</param>
            <param name="srcAddr">Source of the data transmission</param>
            <returns>The number of bytes received from the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">The data byte array is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Reading from the underlying CAN_J1939 socket failed.</exception>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.AbstractNetlinkSocket">
            <summary>
            Provides the base implementation for Netlink sockets.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.AbstractNetlinkSocket.ProtocolType">
            <summary>
            The protocol type of the Netlink socket.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.AbstractNetlinkSocket.Address">
            <summary>
            The current address to which this socket is bound.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.AbstractNetlinkSocket.Bind(SocketCANSharp.Network.Netlink.SockAddrNetlink)">
            <summary>
            Assigns the Netlink Address Structure to the Netlink socket.
            </summary>
            <param name="addr">Netlink Address Structure.</param>
            <exception cref="T:System.ObjectDisposedException">The Netlink socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">Netlink Address Structure is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to assign the provided Netlink Address Structure to the Netlink socket.</exception>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.CanBitTiming">
            <summary>
            CAN Bit Timing Parameters.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTiming.BitRate">
            <summary>
            Bit rate in bits per second.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTiming.SamplePoint">
            <summary>
            Sample point in one-tenth of a percent.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTiming.TimeQuanta">
            <summary>
            Time quanta (TQ) in nanoseconds.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTiming.PropagationSegment">
            <summary>
            Propagation segment in TQs.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTiming.PhaseBufferSegment1">
            <summary>
            Phase buffer segment 1 in TQs.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTiming.PhaseBufferSegment2">
            <summary>
            Phase buffer segment 2 in TQs.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTiming.SyncJumpWidth">
            <summary>
            Synchronisation jump width in TQs.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTiming.BitRatePrescaler">
            <summary>
            Bit Rate Prescaler.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.CanBitTiming.FromBytes(System.Byte[])">
            <summary>
            Converts a raw byte array into a CanBitTiming instance.
            </summary>
            <param name="data">Raw Byte Array.</param>
            <returns>CanBitTiming instance</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.CanBitTiming.ToString">
            <summary>
            Returns a string representation of the current CanBitTiming instance.
            </summary>
            <returns>String representation of this CanBitTiming instance.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.CanBitTimingConstant">
            <summary>
            CAN hardware-dependent bit timing constant. These values are used for calculating and checking bit timing parameters.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanBitTimingConstant.Name">
            <summary>
            Name of the CAN controller hardware.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTimingConstant.TimeSegment1Minimum">
            <summary>
            Time Segment 1 Minimum.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTimingConstant.TimeSegment1Maximum">
            <summary>
            Time Segment 1 Maximum.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTimingConstant.TimeSegment2Minimum">
            <summary>
            Time Segment 2 Minimum.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTimingConstant.TimeSegment2Maximum">
            <summary>
            Time Segment 2 Maximum.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTimingConstant.SyncJumpWidthMaximum">
            <summary>
            Sync Jump Width Maximum.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTimingConstant.BitRatePrescalerMinimum">
            <summary>
            Bit Rate Prescaler Minimum.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTimingConstant.BitRatePrescalerMaximum">
            <summary>
            Bit Rate Prescaler Maximum.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBitTimingConstant.BitRatePrescalerIncrement">
            <summary>
            Bit Rate Prescaler Increment.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.CanBitTimingConstant.FromBytes(System.Byte[])">
            <summary>
            Converts a raw byte array into a CanBitTimingConstant instance.
            </summary>
            <param name="data">Raw Byte Array.</param>
            <returns>CanBitTimingConstant instance</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.CanBitTimingConstant.ToString">
            <summary>
            Returns a string representation of the current CanBitTimingConstant instance.
            </summary>
            <returns>String representation of this CanBitTimingConstant instance.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.CanBusErrorCounter">
            <summary>
            CAN Bus Error Counter Information.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBusErrorCounter.TxErrors">
            <summary>
            Transmit Error Count.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanBusErrorCounter.RxErrors">
            <summary>
            Receive Error Count.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.CanBusErrorCounter.FromBytes(System.Byte[])">
            <summary>
            Converts a raw byte array into a CanBusErrorCounter instance.
            </summary>
            <param name="data">Raw Byte Array.</param>
            <returns>CanBusErrorCounter instance</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.CanBusErrorCounter.ToString">
            <summary>
            Returns a string representation of the current CanBusErrorCounter instance.
            </summary>
            <returns>String representation of this CanBusErrorCounter instance.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.CanClock">
            <summary>
            CAN clock parameters.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanClock.Frequency">
            <summary>
            CAN system clock frequency in Hz.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.CanClock.FromBytes(System.Byte[])">
            <summary>
            Converts a raw byte array into a CanClock instance.
            </summary>
            <param name="data">Raw Byte Array.</param>
            <returns>CanClock instance</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.CanClock.ToString">
            <summary>
            Returns a string representation of the current CanClock instance.
            </summary>
            <returns>String representation of this CanClock instance.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.CanControllerMode">
            <summary>
            CAN Controller Mode Information. 
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanControllerMode.Mask">
            <summary>
            Flag Mask.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanControllerMode.Flags">
            <summary>
            CAN Controller Mode Flags.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.CanControllerMode.FromBytes(System.Byte[])">
            <summary>
            Converts a raw byte array into a CanControllerMode instance.
            </summary>
            <param name="data">Raw Byte Array.</param>
            <returns>CanControllerMode instance</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.CanControllerMode.ToString">
            <summary>
            Returns a string representation of the current CanControllerMode instance.
            </summary>
            <returns>String representation of this CanControllerMode instance.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.CanDeviceStatistics">
            <summary>
            CAN Device Statistics.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanDeviceStatistics.BusErrors">
            <summary>
            Bus errors.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanDeviceStatistics.ErrorWarning">
            <summary>
            Changes to error warning state.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanDeviceStatistics.ErrorPassive">
            <summary>
            Changes to error passive state.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanDeviceStatistics.BusOff">
            <summary>
            Changes to bus off state.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanDeviceStatistics.ArbitrationLost">
            <summary>
            Arbitration lost errors.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanDeviceStatistics.Restarts">
            <summary>
            CAN controller restarts.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.CanDeviceStatistics.FromBytes(System.Byte[])">
            <summary>
            Converts a raw byte array into a CanDeviceStatistics instance.
            </summary>
            <param name="data">Raw Byte Array.</param>
            <returns>CanDeviceStatistics instance</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.CanDeviceStatistics.ToString">
            <summary>
            Returns a string representation of the current CanDeviceStatistics instance.
            </summary>
            <returns>String representation of this CanDeviceStatistics instance.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.CanRoutingAttribute">
            <summary>
            CAN Routing Attribute.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanRoutingAttribute.Type">
            <summary>
            IFLA_CAN_* Routing Attribute Types.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.CanRoutingAttribute.Data">
            <summary>
            Raw Unconverted Data.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.CanRoutingAttribute.#ctor(System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the CanRoutingAttribute class with the specified type and raw unconverted data.
            </summary>
            <param name="type">Attribute Type</param>
            <param name="data">Raw Unconverted Data</param>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.NetlinkProtocolType">
            <summary>
            Protocols of the PF_NETLINK protocol family.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkProtocolType.NETLINK_ROUTE">
            <summary>
            Netlink protocol entry which provides routing and link information.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.NetlinkMessageType">
            <summary>
            Netlink Message Types.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageType.NLMSG_NOOP">
            <summary>
            Nothing - Ignore this message.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageType.NLMSG_ERROR">
            <summary>
            Error messsage. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageType.NLMSG_DONE">
            <summary>
            End of multipart message.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageType.NLMSG_OVERRUN">
            <summary>
            Overrun notification (error).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageType.RTM_NEWLINK">
            <summary>
            Create network interface.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageType.RTM_DELLINK">
            <summary>
            Remove network interface.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageType.RTM_GETLINK">
            <summary>
            Get information about a network interface.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageType.RTM_SETLINK">
            <summary>
            Set information on a network interface.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageType.RTM_NEWROUTE">
            <summary>
            Create a network route.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageType.RTM_DELROUTE">
            <summary>
            Remove a network route.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageType.RTM_GETROUTE">
            <summary>
            Receive information about a network route.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.NetlinkMessageFlags">
            <summary>
            Netlink Message Flags.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageFlags.NLM_F_REQUEST">
            <summary>
            Message is a Request Message.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageFlags.NLM_F_MULTI">
            <summary>
            Multi-part message which shall be terminated by a NLMSG_DONE message.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageFlags.NLM_F_ACK">
            <summary>
            Request an acknowledgement from the receiver.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageFlags.NLM_F_ROOT">
            <summary>
            Get Tree Root of Network Interfaces.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageFlags.NLM_F_MATCH">
            <summary>
            Get All Matching Network Interfaces.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageFlags.NLM_F_DUMP">
            <summary>
            Dump all network interface information.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.ArpHardwareIdentifier">
            <summary>
            ARP Protocol Hardware Identifier.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.ArpHardwareIdentifier.ARPHRD_CAN">
            <summary>
            Controller Area Network
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.NetDeviceFlags">
            <summary>
            Device Flags
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_UP">
            <summary>
            Interface is up. System admin has marked link as active. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_BROADCAST">
            <summary>
            Interface supports broadcasting with a valid broadcast address set.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_DEBUG">
            <summary>
            Invokes driver to perform debugging.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_LOOPBACK">
            <summary>
            Interface is a Loopback Link.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_POINTOPOINT">
            <summary>
            Interface is a Point-to-Point Link.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_NOTRAILERS">
            <summary>
            Don't use trailers.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_RUNNING">
            <summary>
            Interface is up and carrier is OK (RFC2863 Operational).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_NOARP">
            <summary>
            Interface does not support ARP.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_PROMISC">
            <summary>
            Interface is in promiscuous mode.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_ALLMULTI">
            <summary>
            Interface supports multicast routing.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_MASTER">
            <summary>
            Master of a load balancer.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_SLAVE">
            <summary>
            Slave of a load balancer.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_MULTICAST">
            <summary>
            Interface supports multicasting.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_PORTSEL">
            <summary>
            Driver supports setting media type.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_AUTOMEDIA">
            <summary>
            Link selects media automatically. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_DYNAMIC">
            <summary>
            Addresses are lost whenever the interface goes down.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_LOWER_UP">
            <summary>
            Link layer is operational.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_DORMANT">
            <summary>
            Driver signals dormant.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetDeviceFlags.IFF_ECHO">
            <summary>
            Echo sent packets.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType">
            <summary>
            Interface Link Attribute Type.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_UNSPEC">
            <summary>
            Unspecified Interface Link Attribute.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_ADDRESS">
            <summary>
            Hardware Address.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_BROADCAST">
            <summary>
            Hardware Broadcast Address.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_IFNAME">
            <summary>
            Interface Name.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_MTU">
            <summary>
            Interface Maximum Transmission Unit (MTU).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_LINK">
            <summary>
            Interface Index.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_QDISC">
            <summary>
            Queueing discipline.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_STATS">
            <summary>
            Interface statistics.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_COST">
            <summary>
            Cost.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_PRIORITY">
            <summary>
            Priority.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_MASTER">
            <summary>
            Master Interface Index.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_WIRELESS">
            <summary>
            Wireless Extension event.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_PROTINFO">
            <summary>
            Protocol specific information for a link.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_TXQLEN">
            <summary>
            Transmit Queue Length.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_MAP">
            <summary>
            Interface map which represents hardware parameters of the corresponding device. Dependent on device driver and architecture.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_WEIGHT">
            <summary>
            Interface Link Weight.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_OPERSTATE">
            <summary>
            The RFC2863 state of the interface.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_LINKMODE">
            <summary>
            Link Policy.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_LINKINFO">
            <summary>
            Network Interface Information.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_NET_NS_PID">
            <summary>
            Network Namespace Process ID (PID).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_IFALIAS">
            <summary>
            Interface Alias of a device.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_NUM_VF">
            <summary>
            Number of Virtual Functions (VFs) if device is SR-IOV PF
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_VFINFO_LIST">
            <summary>
            List of Virtual Function (VF) information.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_STATS64">
            <summary>
            Main device statistics structure (64 bit fields).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_VF_PORTS">
            <summary>
            Virtual Function (VF) Ports.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_PORT_SELF">
            <summary>
            Ports.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_AF_SPEC">
            <summary>
            Address Family Specific Configuration.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_GROUP">
            <summary>
            Group the network interface device belongs to.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_NET_NS_FD">
            <summary>
            Network Namespace File Descriptor (FD).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_EXT_MASK">
            <summary>
            Extended information mask for Virtual Functions (VFs), etc.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_PROMISCUITY">
            <summary>
            Promiscuity count. When greater than 0 means network interface acts in Promiscuous Mode.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_NUM_TX_QUEUES">
            <summary>
            Number of Transmit Queues.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_NUM_RX_QUEUES">
            <summary>
            Number of Receive Queues.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_CARRIER">
            <summary>
            Carrier (Lower Layer) Status Information.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_PHYS_PORT_ID">
            <summary>
            Physical Port ID.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_CARRIER_CHANGES">
            <summary>
            Carrier Up and Down Counters Combined.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_PHYS_SWITCH_ID">
            <summary>
            Physical Switch ID.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_LINK_NETNSID">
            <summary>
            Network Namespace ID.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_PHYS_PORT_NAME">
            <summary>
            Physical Port Name.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_PROTO_DOWN">
            <summary>
            Protocol port state.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_GSO_MAX_SEGS">
            <summary>
            Maximum number of segments that can be passed to the NIC for Generic Segmentation Offload (GSO).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_GSO_MAX_SIZE">
            <summary>
            Maximum size of Generic Segmentation Offload (GSO) packet.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_PAD">
            <summary>
            Attribute Type for Padding.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_XDP">
            <summary>
            Express Data Path (XDP) information.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_EVENT">
            <summary>
            Interface Link Event.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_NEW_NETNSID">
            <summary>
            New Network Namespace ID.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_IF_NETNSID">
            <summary>
            Target Network Namespace ID.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_TARGET_NETNSID">
            <summary>
            Alias for Target Network Namespace ID.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_CARRIER_UP_COUNT">
            <summary>
            Carrier Up Counter.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_CARRIER_DOWN_COUNT">
            <summary>
            Carrier Down Counter.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_NEW_IFINDEX">
            <summary>
            New Interface Index.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_MIN_MTU">
            <summary>
            Minimum value for the Interface Maximum Transmission Unit (MTU).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_MAX_MTU">
            <summary>
            Maximum value for the Interface Maximum Transmission Unit (MTU).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_PROP_LIST">
            <summary>
            Interface Property List.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_ALT_IFNAME">
            <summary>
            Alternate Interface Name.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_PERM_ADDRESS">
            <summary>
            Permanent Hardware Address of the Interface.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_PROTO_DOWN_REASON">
            <summary>
            Reason for protocol port state.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_PARENT_DEV_NAME">
            <summary>
            Parent Device Name.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_PARENT_DEV_BUS_NAME">
            <summary>
            Parent Device Bus Name.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_GRO_MAX_SIZE">
            <summary>
            Maximum size of Generic Receive Offload (GRO) packet.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_TSO_MAX_SIZE">
            <summary>
            Maximum size of TCP Segmentation Offload (TSO) packet.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_TSO_MAX_SEGS">
            <summary>
            Maximum number of segments that can be passed to the NIC for TCP Segmentation Offload (TSO).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType.IFLA_ALLMULTI">
            <summary>
            Counter which enables or disables allmulticast mode.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.InterfaceOperationalStatus">
            <summary>
            The RFC2863 state of the interface.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceOperationalStatus.IF_OPER_UNKNOWN">
            <summary>
            Interface is in an unknown state, neither driver nor userspace has set the operational state.
            Note: Not all drivers have implemented setting operational state.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceOperationalStatus.IF_OPER_NOTPRESENT">
            <summary>
            Currently unused state in the kernel. Interfaces that are not present are usually not visible.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceOperationalStatus.IF_OPER_DOWN">
            <summary>
            Interface is unable to transfer data to Layer 1 (Physical Layer). Typically, this means that either the interface is unplugged or system admin has placed it into down state.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceOperationalStatus.IF_OPER_LOWERLAYERDOWN">
            <summary>
            Interface is stacked on an interface that is IF_OPER_DOWN are in this state. 
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceOperationalStatus.IF_OPER_TESTING">
            <summary>
            Interface is in testing mode. For example, executing driver self-test or media (cable) test.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceOperationalStatus.IF_OPER_DORMANT">
            <summary>
            Interface has Layer 1 (Physical Layer) up, but is waiting for an external event to occur.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceOperationalStatus.IF_OPER_UP">
            <summary>
            Interface is operationally up and can be utilized. 
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.InterfaceLinkMode">
            <summary>
            Interface Link Mode.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkMode.IF_LINK_MODE_DEFAULT">
            <summary>
            Default Mode.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkMode.IF_LINK_MODE_DORMANT">
            <summary>
            Dormant Mode.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.InterfaceLinkMode.IF_LINK_MODE_TESTING">
            <summary>
            Testing Mode.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.LinkInfoAttributeType">
            <summary>
            Interface Link Information Attribute Type. Nested in IFLA_LINKINFO Interface Link Attribute Type.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.LinkInfoAttributeType.IFLA_INFO_UNSPEC">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.LinkInfoAttributeType.IFLA_INFO_KIND">
            <summary>
            Link Kind.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.LinkInfoAttributeType.IFLA_INFO_DATA">
            <summary>
            Link Data.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.LinkInfoAttributeType.IFLA_INFO_XSTATS">
            <summary>
            Link Statistics.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.LinkInfoAttributeType.IFLA_INFO_SLAVE_KIND">
            <summary>
            Link Slave Kind.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.LinkInfoAttributeType.IFLA_INFO_SLAVE_DATA">
            <summary>
            Link Slave Data.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.CanRoutingAttributeType">
            <summary>
            CAN Routing Attribute Types. Nested in IFLA_INFO_DATA Interface Link Information Attribute Type.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_UNSPEC">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_BITTIMING">
            <summary>
            CAN Bit Timing Parameters.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_BITTIMING_CONST">
            <summary>
            CAN hardware-dependent bit timing constant.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_CLOCK">
            <summary>
            CAN clock parameters.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_STATE">
            <summary>
            CAN operational or error state.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_CTRLMODE">
            <summary>
            CAN Controller Mode.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_RESTART_MS">
            <summary>
            CAN Restart Delay.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_RESTART">
            <summary>
            CAN Restart.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_BERR_COUNTER">
            <summary>
            CAN Bus Error Counter Information.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_DATA_BITTIMING">
            <summary>
            CAN Bit Timing Parameters in Data Phase.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_DATA_BITTIMING_CONST">
            <summary>
            CAN hardware-dependent bit timing constant in Data Phase.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_TERMINATION">
            <summary>
            CAN Termination Value.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_TERMINATION_CONST">
            <summary>
            CAN Termination Constant.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_BITRATE_CONST">
            <summary>
            CAN Bit Rate Constant.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_DATA_BITRATE_CONST">
            <summary>
            CAN Bit Rate Constant in Data Phase.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_BITRATE_MAX">
            <summary>
            CAN Bit Rate Maximum.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_TDC">
            <summary>
            CAN FD Transmitter Delay Compensation (TDC).
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanRoutingAttributeType.IFLA_CAN_CTRLMODE_EXT">
            <summary>
            CAN Controller Mode Extended. Options that can be modified by Netlink.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.CanState">
            <summary>
            CAN operational or error state.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanState.CAN_STATE_ERROR_ACTIVE">
            <summary>
            Error Active: RX/TX error count less than 96.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanState.CAN_STATE_ERROR_WARNING">
            <summary>
            Error Warning: RX/TX error count less than 128.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanState.CAN_STATE_ERROR_PASSIVE">
            <summary>
            Error Passive: RX/TX error count less than 256.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanState.CAN_STATE_BUS_OFF">
            <summary>
            Bus Off: RX/TX error count greater than or equal to 256.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanState.CAN_STATE_STOPPED">
            <summary>
            CAN Device is stopped.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanState.CAN_STATE_SLEEPING">
            <summary>
            CAN Device is sleeping.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.CanControllerModeFlags">
            <summary>
            CAN Controller Mode Flags.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanControllerModeFlags.CAN_CTRLMODE_LOOPBACK">
            <summary>
            Loopback mode.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanControllerModeFlags.CAN_CTRLMODE_LISTENONLY">
            <summary>
            Listen-only mode.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanControllerModeFlags.CAN_CTRLMODE_3_SAMPLES">
            <summary>
            Triple sampling mode.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanControllerModeFlags.CAN_CTRLMODE_ONE_SHOT">
            <summary>
            One-Shot mode.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanControllerModeFlags.CAN_CTRLMODE_BERR_REPORTING">
            <summary>
            Bus-error reporting.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanControllerModeFlags.CAN_CTRLMODE_FD">
            <summary>
            CAN FD mode.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanControllerModeFlags.CAN_CTRLMODE_PRESUME_ACK">
            <summary>
            Ignore missing CAN ACKs.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanControllerModeFlags.CAN_CTRLMODE_FD_NON_ISO">
            <summary>
            CAN FD in non-ISO mode.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanControllerModeFlags.CAN_CTRLMODE_CC_LEN8_DLC">
            <summary>
            Classic CAN DLC option.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanControllerModeFlags.CAN_CTRLMODE_TDC_AUTO">
            <summary>
            CAN transiver automatically calculates TDCV.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.CanControllerModeFlags.CAN_CTRLMODE_TDC_MANUAL">
            <summary>
            TDCV is manually set up by user.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.AbstractCanGatewayModifier">
            <summary>
            CGW Modifier.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.AbstractCanGatewayModifier.ModificationTargets">
            <summary>
            CGW Modification Target (CAN Identifier, CAN length field, CAN data, CAN flags).
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.AbstractCanGatewayModifier.#ctor(SocketCANSharp.Network.Netlink.Gateway.CanGatewayModificationType)">
            <summary>
            Base constructor provided by the AbstractCanGatewayModifier abstact class.
            </summary>
            <param name="target">Specifies target of the operation.</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.AbstractCanGatewayModifier.ToString">
            <summary>
            Returns a string that represents the current AbstractCanGatewayModifier object.
            </summary>
            <returns>A string that represents the current AbstractCanGatewayModifier object.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CanFdGatewayModifier">
            <summary>
            CGW CAN FD Modifier.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CanFdGatewayModifier.CanFdFrame">
            <summary>
            CAN FD Frame to utilize in modification operation.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanFdGatewayModifier.#ctor(SocketCANSharp.Network.Netlink.Gateway.CanGatewayModificationType,SocketCANSharp.CanFdFrame)">
            <summary>
            Initializes a new instance of the CanFdGatewayModifier class.
            </summary>
            <param name="target">Specifies target of the operation.</param>
            <param name="frame">CAN FD Frame to use in the modification operation.</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanFdGatewayModifier.ToString">
            <summary>
            Returns a string that represents the current CanFdGatewayModifier object.
            </summary>
            <returns>A string that represents the current CanFdGatewayModifier object.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CanGatewayNativeMethods">
            <summary>
            CAN Gateway Native Methods
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest,System.Int32)">
            <summary>
            Write the CAN Gateway Request to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrappper Instance</param>
            <param name="req">CAN Gateway Request to write</param>
            <param name="reqSize">Size of CAN Gateway Request in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest">
            <summary>
            CAN Gateway Get Request.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.Header">
            <summary>
            Message Header.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.Message">
            <summary>
            Routing CAN Message.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.Data">
            <summary>
            Request Data.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.#ctor">
            <summary>
            Initializes a new instance of the CanGatewayRequest class.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.#ctor(SocketCANSharp.Network.Netlink.Gateway.CanGatewayOperation,SocketCANSharp.Network.Netlink.Gateway.CanGatewayType,SocketCANSharp.Network.Netlink.Gateway.CanGatewayFlag)">
            <summary>
            Initializes a new instance of the CanGatewayRequest class using the supplied CGW Operation, Type, and Flags.
            </summary>
            <param name="cgwOperation">Whether to Add/Update existing rule, List all rules, Remove a rule or Remove All rules.</param>
            <param name="cgwType">CAN Gateway Type (i.e. CAN-to-CAN)</param>
            <param name="cgwFlags">Operation Flags for CAN FD, Echoing sent frames, etc.</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.#ctor(SocketCANSharp.Network.Netlink.Gateway.CanGatewayOperation,SocketCANSharp.Network.Netlink.Gateway.CgwCanToCanRule)">
            <summary>
            Initializes a new instance of the CanGatewayRequest class using the supplied CGW Operation and CAN-to-CAN Routing Rule.
            </summary>
            <param name="cgwOperation">CGW Operation</param>
            <param name="canToCanRule">CAN-to-CAN Routing Rule</param>
            <exception cref="T:System.ArgumentNullException">CAN-to-CAN Routing Rule cannot be null.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.AddCanGatewayAttribute(SocketCANSharp.Network.Netlink.Gateway.CanGatewayRoutingAttribute)">
            <summary>
            Adds a CAN Gateway Routing Attribute to the request payload.
            </summary>
            <param name="attr">Attribute to append to the request</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if adding the attribute would exceed the bounds of the payload array.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.SetRoutingPath(System.UInt32,System.UInt32)">
            <summary>
            Specify Routing Path.
            </summary>
            <param name="srcIndex">Source Network Interface Index</param>
            <param name="dstIndex">Destination Network InterfaceIndex</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.SetUpdateIdentifier(System.UInt32)">
            <summary>
            Specify Update Identifier.
            </summary>
            <param name="uid">UID used when making updates to existing rules.</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.SetRuleHopLimit(System.Byte)">
            <summary>
            Specify Hop Limit for routing rule.
            </summary>
            <param name="hopLimit">Hop Limit for rule.</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.SetReceiveFilter(SocketCANSharp.CanFilter)">
            <summary>
            Specify CAN Receive Filter on source interface.
            </summary>
            <param name="canFilter">CAN Receive Filter on source interface.</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.SetBinaryAndModifier(SocketCANSharp.Network.Netlink.Gateway.AbstractCanGatewayModifier)">
            <summary>
            Specify Binary AND frame modification.
            </summary>
            <param name="modifier">Frame modification</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Unrecognized modifier type.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.SetBinaryOrModifier(SocketCANSharp.Network.Netlink.Gateway.AbstractCanGatewayModifier)">
            <summary>
            Specify Binary OR frame modification.
            </summary>
            <param name="modifier">Frame modification</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Unrecognized modifier type.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.SetBinaryXorModifier(SocketCANSharp.Network.Netlink.Gateway.AbstractCanGatewayModifier)">
            <summary>
            Specify Binary XOR frame modification.
            </summary>
            <param name="modifier">Frame modification</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Unrecognized modifier type.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.SetBinarySetModifier(SocketCANSharp.Network.Netlink.Gateway.AbstractCanGatewayModifier)">
            <summary>
            Specify Binary SET frame modification.
            </summary>
            <param name="modifier">Frame modification</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Unrecognized modifier type.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.SetChecksumXorConfiguration(SocketCANSharp.Network.Netlink.Gateway.CgwChecksumXor)">
            <summary>
            Specify Checksum XOR configuration.
            </summary>
            <param name="checksumXor">Checksum XOR configuration</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.SetCrc8Configuration(SocketCANSharp.Network.Netlink.Gateway.CgwCrc8)">
            <summary>
            Specify CRC8 configuration.
            </summary>
            <param name="crc8">CRC8 configuration</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRequest.ParseAttributes(System.Byte[])">
            <summary>
            Parses the attributes from the buffer.
            </summary>
            <param name="rxBuffer">Attribute buffer</param>
            <returns>List of attributes parsed from the buffer.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the attribute buffer is null</exception>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRoutingAttribute">
            <summary>
            CAN Gateway Routing Attribute.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRoutingAttribute.Length">
            <summary>
            CAN Gateway Attribute Length.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRoutingAttribute.Type">
            <summary>
            CAN Gateway Attribute Type.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRoutingAttribute.Data">
            <summary>
            Attribute Data.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRoutingAttribute.#ctor(SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType,System.Byte[])">
            <summary>
            Initializes a new instance of the CanRoutingAttribute class.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRoutingAttribute.TryParse(System.Byte[],SocketCANSharp.Network.Netlink.Gateway.CanGatewayRoutingAttribute@)">
            <summary>
            Parses a CAN Gateway Routing Attribute from a buffer. The boolean return value indicates whether the parsing operation was a success or not.
            </summary>
            <param name="attrData">Buffer to parse</param>
            <param name="attribute">CAN Gateway Routing Attribute parsed from the buffer</param>
            <returns>Returns True, if buffer was successfully parsed; otherwise, False.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewayRoutingAttribute.ToString">
            <summary>
            Returns a string that represents the current CanGatewayRoutingAttribute object.
            </summary>
            <returns>A string that represents the current CanGatewayRoutingAttribute object.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CanGatewaySocket">
            <summary>
            Provides CAN Gateway (CGW) Netlink socket services.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewaySocket.#ctor">
            <summary>
            Initializes a new instance of the CanGatewaySocket class.
            </summary>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to create the requested socket.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewaySocket.AddOrUpdateCanToCanRule(SocketCANSharp.Network.Netlink.Gateway.CgwCanToCanRule)">
            <summary>
            Adds or Updates a CAN-to-CAN Gateway Rule.
            </summary>
            <param name="rule">CAN-to-CAN Gateway Rule.</param>
            <returns>Number of bytes written to the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Writing to the underlying NETLINK_ROUTE socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewaySocket.RemoveAllCanToCanRules">
            <summary>
            Remove all CAN-to-CAN Gateway Rules.
            </summary>
            <returns>Number of bytes written to the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Writing to the underlying NETLINK_ROUTE socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewaySocket.RemoveCanToCanRule(SocketCANSharp.Network.Netlink.Gateway.CgwCanToCanRule)">
            <summary>
            Remove a CAN-to-CAN Gateway Rule.
            </summary>
            <returns>Number of bytes written to the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Writing to the underlying NETLINK_ROUTE socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewaySocket.RequestListOfAllRules">
            <summary>
            Requests a list of all CGW Routing Rules.
            </summary>
            <returns>Number of bytes written to the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Writing to the underlying NETLINK_ROUTE socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewaySocket.Read(System.Byte[])">
            <summary>
            Reads data from the socket into the supplied receive buffer.
            </summary>
            <param name="data">An array of bytes that is the receive buffer</param>
            <returns>The number of bytes received from the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">The data byte array is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Reading from the underlying NETLINK_ROUTE socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CanGatewaySocket.ParseCanToCanRules(System.Byte[],System.Boolean@)">
            <summary>
            Parse CAN-to-CAN Routing Rules from supplied buffer.
            </summary>
            <param name="buffer">Buffer containing CGW CAN-to-CAN netlink routing rules.</param>
            <param name="keepReading">True, to indicate to the caller that Read function needs to be called again. Otherwise, false.</param>
            <returns>List of parsed CAN-to-CAN Routing Rules.</returns>
            <exception cref="T:System.ArgumentNullException">Supplied buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Supplied buffer contains insufficient or invalid data.</exception>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule">
            <summary>
            CGW Base Rule.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.GatewayType">
            <summary>
            CGW Type.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.EnableLocalCanSocketLoopback">
            <summary>
            Enables loopback for listeners on the local CAN sockets.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.MaintainSourceTimestamp">
            <summary>
            Keep the source timestamp associated with the data instead of clearing it on receive.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.AllowRoutingToSameInterface">
            <summary>
            Enables routing the received data back to the originating interface.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.IsCanFdRule">
            <summary>
            Process CAN FD Frames.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.AndModifier">
            <summary>
            CGW Binary AND Modifier.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.OrModifier">
            <summary>
            CGW Binary OR Modifier.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.XorModifier">
            <summary>
            CGW Binary XOR Modifier.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.SetModifier">
            <summary>
            CGW Binary SET Modifier.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.ChecksumXorConfiguration">
            <summary>
            CGW Checksum XOR Configuration.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.Crc8Configuration">
            <summary>
            CGW CRC8 Configuration.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.HopLimit">
            <summary>
            Specify Hop Limit for this CAN-to-CAN Routing Rule.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.UpdateIdentifier">
            <summary>
            Update Identifier which is useful when making runtime updates to a rule.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.HandledFrames">
            <summary>
            Number of Handled CAN Frames. Only valid in list response.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.DroppedFrames">
            <summary>
            Number of Dropped CAN Frames. Only valid in list response.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.DeletedFrames">
            <summary>
            Number of Deleted CAN Frames. Only valid in list response.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.#ctor(SocketCANSharp.Network.Netlink.Gateway.CanGatewayType,SocketCANSharp.Network.Netlink.Gateway.CgwCanFrameType)">
            <summary>
            Initializes a new instance of the CgwBaseRule class with the specified CGW Type.
            </summary>
            <param name="gwType">CGW Type</param>
            <param name="canFrameType">CAN Frame Type</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CgwBaseRule.ToString">
            <summary>
            Returns a string that represents the current CgwBaseRule object.
            </summary>
            <returns>A string that represents the current CgwBaseRule object.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CgwCanFdFrameModification">
            <summary>
            CAN Gateway CAN FD Frame Modification.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwCanFdFrameModification.CanFdFrame">
            <summary>
            CAN FD Frame.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwCanFdFrameModification.ModificationType">
            <summary>
            Modification Type.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CgwCanFdFrameModification.#ctor(SocketCANSharp.Network.Netlink.Gateway.CanGatewayModificationType,SocketCANSharp.CanFdFrame)">
            <summary>
            Initializes a new instance of the CgwCanFdFrameModification struct with the specified modification type and CAN FD Frame.
            </summary>
            <param name="type">Modification Type</param>
            <param name="canFdFrame">CAN FD Frame</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CgwCanFdFrameModification.ToString">
            <summary>
            Returns a string that represents the current CgwCanFdFrameModification object.
            </summary>
            <returns>A string that represents the current CgwCanFdFrameModification object.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CgwCanFrameModification">
            <summary>
            CAN Gateway Classical CAN Frame Modification.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwCanFrameModification.CanFrame">
            <summary>
            Classical CAN Frame.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwCanFrameModification.ModificationType">
            <summary>
            Modification Type.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CgwCanFrameModification.#ctor(SocketCANSharp.Network.Netlink.Gateway.CanGatewayModificationType,SocketCANSharp.CanFrame)">
            <summary>
            Initializes a new instance of the CgwCanFrameModification struct with the specified modification type and CAN Frame.
            </summary>
            <param name="type">Modification Type</param>
            <param name="canFrame">CAN Frame</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CgwCanFrameModification.ToString">
            <summary>
            Returns a string that represents the current CgwCanFrameModification object.
            </summary>
            <returns>A string that represents the current CgwCanFrameModification object.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CgwCanToCanRule">
            <summary>
            CGW CAN-to-CAN Routing Rule.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwCanToCanRule.SourceIndex">
            <summary>
            Source CAN Network Interface Index.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwCanToCanRule.DestinationIndex">
            <summary>
            Destination CAN Network Interface Index.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwCanToCanRule.ReceiveFilter">
            <summary>
            CAN Receive Filter on Source Interface.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CgwCanToCanRule.#ctor(SocketCANSharp.Network.Netlink.Gateway.CgwCanFrameType)">
            <summary>
            Initializes a new instance of the CgwCanToCanRule class.
            </summary>
            <param name="canFrameType">CAN Frame Type</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CgwCanToCanRule.ToString">
            <summary>
            Returns a string that represents the current CgwCanToCanRule object.
            </summary>
            <returns>A string that represents the current CgwCanToCanRule object.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CgwChecksumXor">
            <summary>
            CAN Gateway Checksum XOR.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwChecksumXor.FromIndex">
            <summary>
            Source Index.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwChecksumXor.ToIndex">
            <summary>
            Destination Index.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwChecksumXor.ResultIndex">
            <summary>
            Result Index.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwChecksumXor.InitialXorValue">
            <summary>
            Initial XOR Value.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CgwChecksumXor.#ctor(System.SByte,System.SByte,System.SByte,System.Byte)">
            <summary>
            Initializes a new instance of the CgwChecksumXor structure.
            </summary>
            <param name="fromIndex">Starting Index of CAN Frame for XOR Checksum Calculation.</param>
            <param name="toIndex">Ending Index of CAN Frame for XOR Checksum Calculation.</param>
            <param name="resultIndex">Index within CAN Frame to place the checksum result.</param>
            <param name="initXorValue">Initial value to use in the calculation.</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CgwChecksumXor.ToString">
            <summary>
            Returns a string that represents the current CgwChecksumXor object.
            </summary>
            <returns>A string that represents the current CgwChecksumXor object.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CgwCrc8">
            <summary>
            CAN Gateway CRC8.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwCrc8.FromIndex">
            <summary>
            From Index.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwCrc8.ToIndex">
            <summary>
            To Index.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwCrc8.ResultIndex">
            <summary>
            Result Index.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwCrc8.InitialCrcValue">
            <summary>
            Initial CRC Value.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwCrc8.FinalXorValue">
            <summary>
            Final XOR Value.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CgwCrc8.CrcTable">
            <summary>
            CRC Table.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.CgwCrc8.Profile">
            <summary>
            CRC Profile.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CgwCrc8.ProfileData">
            <summary>
            CRC Profile Data.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CgwCrc8.ToString">
            <summary>
            Returns a string that represents the current CgwCrc8 object.
            </summary>
            <returns>A string that represents the current CgwCrc8 object.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.CgwCrc8.IsValid">
            <summary>
            Determines if the structure is valid or not.
            </summary>
            <returns>True if the structure is valid.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.ClassicalCanGatewayModifier">
            <summary>
            CGW Classical CAN Modifier.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.ClassicalCanGatewayModifier.CanFrame">
            <summary>
            CAN Frame to utilize in modification operation.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.ClassicalCanGatewayModifier.#ctor(SocketCANSharp.Network.Netlink.Gateway.CanGatewayModificationType,SocketCANSharp.CanFrame)">
            <summary>
            Initializes a new instance of the ClassicalCanGatewayModifier class.
            </summary>
            <param name="target">Specifies target of the operation.</param>
            <param name="frame">CAN Frame to use in the modification operation.</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.ClassicalCanGatewayModifier.ToString">
            <summary>
            Returns a string that represents the current ClassicalCanGatewayModifier object.
            </summary>
            <returns>A string that represents the current ClassicalCanGatewayModifier object.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CanGatewayType">
            <summary>
            CAN Gateway Type
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayType.CGW_TYPE_UNSPEC">
            <summary>
            Unspecified Gateway Type
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayType.CGW_TYPE_CAN_CAN">
            <summary>
            CAN-to-CAN Gateway
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType">
            <summary>
            CAN Gateway Attribute Type.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_UNSPEC">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_MOD_AND">
            <summary>
            CAN frame modification binary AND.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_MOD_OR">
            <summary>
            CAN frame modification binary OR.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_MOD_XOR">
            <summary>
            CAN frame modification binary XOR.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_MOD_SET">
            <summary>
            CAN frame modification set alternate values.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_CS_XOR">
            <summary>
            set data[] XOR checksum into data[index].
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_CS_CRC8">
            <summary>
            set data[] CRC8 checksum into data[index].
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_HANDLED">
            <summary>
            Number of handled CAN frames.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_DROPPED">
            <summary>
            Number of dropped CAN frames.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_SRC_IF">
            <summary>
            Obtain interface index of source network interface.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_DST_IF">
            <summary>
            Obtain interface index of destination network interface.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_FILTER">
            <summary>
            Specify CAN Filter struct on source CAN device.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_DELETED">
            <summary>
            Number of deleted CAN frames.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_LIM_HOPS">
            <summary>
            Limit the number of hops of this specific rule.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_MOD_UID">
            <summary>
            User defined identifier for modification updates.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_FDMOD_AND">
            <summary>
            CAN FD frame modification binary AND.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_FDMOD_OR">
            <summary>
            CAN FD frame modification binary OR.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_FDMOD_XOR">
            <summary>
            CAN FD frame modification binary XOR.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayAttributeType.CGW_FDMOD_SET">
            <summary>
            CAN FD frame modification set alternate values.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CanGatewayFlag">
            <summary>
            CAN Gateway Flags.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayFlag.CGW_FLAGS_CAN_ECHO">
            <summary>
            Enables loopback for listeners on the local CAN sockets.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayFlag.CGW_FLAGS_CAN_SRC_TSTAMP">
            <summary>
            Keep the source timestamp associated with the data instead of clearing it on receive.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayFlag.CGW_FLAGS_CAN_IIF_TX_OK">
            <summary>
            Enables routing the received data back to the originating interface.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayFlag.CGW_FLAGS_CAN_FD">
            <summary>
            Process CAN FD Frames.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CanGatewayModificationType">
            <summary>
            CAN Gateway Modification Types.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayModificationType.CGW_MOD_ID">
            <summary>
            Modify Identifier.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayModificationType.CGW_MOD_LEN">
            <summary>
            Modify Length.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayModificationType.CGW_MOD_DATA">
            <summary>
            Modify Data.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayModificationType.CGW_MOD_FLAGS">
            <summary>
            Modify CAN FD Flags.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.Crc8Profile">
            <summary>
            CRC8 Profiles.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.Crc8Profile.CGW_CRC8PRF_UNSPEC">
            <summary>
            Unspecified Profile.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.Crc8Profile.CGW_CRC8PRF_1U8">
            <summary>
            Compute one addition byte value.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.Crc8Profile.CGW_CRC8PRF_16U8">
            <summary>
            Byte value table indexed by data[1] AND 0x0F.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.Crc8Profile.CGW_CRC8PRF_SFFID_XOR">
            <summary>
            (CAN_ID AND 0xFF) XOR (CAN_ID right shift 8 bits AND 0xFF)
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CanGatewayOperation">
            <summary>
            CAN Gateway Operation.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayOperation.AddOrUpdate">
            <summary>
            Add or update existing CGW rule.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayOperation.Remove">
            <summary>
            Remove existing CGW rule.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayOperation.List">
            <summary>
            List CGW rules.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CanGatewayOperation.RemoveAll">
            <summary>
            Delete all CGW rules.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.CgwCanFrameType">
            <summary>
            CAN Gateway CAN Frame Type.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CgwCanFrameType.ClassicalCAN">
            <summary>
            Classical CAN (2.0b) Frame Type.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.Gateway.CgwCanFrameType.CANFD">
            <summary>
            CAN Flexible Data-Rate (FD) Frame Type.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.Gateway.RoutingCanMessage">
            <summary>
            Netlink Routing CAN Message.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.RoutingCanMessage.CanFamily">
            <summary>
            Address Family.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.RoutingCanMessage.GatewayType">
            <summary>
            CAN Gateway Type.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.Gateway.RoutingCanMessage.GatewayFlags">
            <summary>
            CAN Gateway Flags.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.RoutingCanMessage.#ctor(SocketCANSharp.Network.Netlink.Gateway.CanGatewayType,SocketCANSharp.Network.Netlink.Gateway.CanGatewayFlag)">
            <summary>
            Initializes a new instance of the RoutingCanMessage struct as CAN-to-CAN Gateway Type with the specified Gateway flags.
            </summary>
            <param name="gwType">Gateway Type</param>
            <param name="gwFlags">Gateway Flags</param>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.RoutingCanMessage.ToString">
            <summary>
            Returns a string that represents the current RoutingCanMessage object.
            </summary>
            <returns>A string that represents the current RoutingCanMessage object.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.RoutingCanMessage.FromBytes(System.Byte[])">
            <summary>
            Converts a raw byte array into an RoutingCanMessage object.
            </summary>
            <param name="data">Raw Byte Array</param>
            <returns>RoutingCanMessage object</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.Gateway.RoutingCanMessage.UnmanagedSize">
            <summary>
            The unmanaged size, in bytes, of the Routing CAN Message.
            </summary>
            <returns>Unmanaged size of the Routing CAN Message in bytes.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.InterfaceInfoMessage">
            <summary>
            Information about a specific network interface.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceInfoMessage.AddressFamily">
            <summary>
            Address Family.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceInfoMessage.Pad">
            <summary>
            Zero. Pad Byte.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceInfoMessage.DeviceType">
            <summary>
            Device Type.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceInfoMessage.InterfaceIndex">
            <summary>
            Interface Index.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceInfoMessage.DeviceFlags">
            <summary>
            Device Flags.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceInfoMessage.ChangeMask">
            <summary>
            Change Mask.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.InterfaceInfoMessage.FromBytes(System.Byte[])">
            <summary>
            Converts a raw byte array into an InterfaceInfoMessage object.
            </summary>
            <param name="data">Raw Byte Array</param>
            <returns>InterfaceInfoMessage object</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.InterfaceLinkAttribute">
            <summary>
            Interface Link Attrbute.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkAttribute.Type">
            <summary>
            Interface Link Attribute Type.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkAttribute.Data">
            <summary>
            Raw Attribute Data.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.InterfaceLinkAttribute.#ctor(System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the InterfaceLinkAttribute class with the specified type and raw unconverted data.
            </summary>
            <param name="type">Attribute Type</param>
            <param name="data">Raw Unconverted Data</param>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics">
            <summary>
            Interface Link Statistics with 32 bit length parameters.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.RxPackets">
            <summary>
            Number of good packets received by the interface. 
            For hardware interfaces, this count includes all good packets received from the device by the host and includes packets which the host had to drop at various stages of processing.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.TxPackets">
            <summary>
            Number of packets successfully transmitted. 
            For hardware interfaces, this count includes packets which the host was able to successfully hand over to the device, but this does not necessarily mean that packets were successfully transmitted out of the device and only that the device acknowledged it copied them out of host memory.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.RxBytes">
            <summary>
            Number of good received bytes, corresponding to RxPackets.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.TxBytes">
            <summary>
            Number of good transmitted bytes, corresponding to TxPackets.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.RxErrors">
            <summary>
            Total number of bad packets received on this network device. 
            This counter includes events counted by RxLengthErrors, RxCrcErrors, RxFrameErrors as well as other errors.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.TxErrors">
            <summary>
            Total number of transmit errors. 
            This counter includes events counted by TxAbortedErrors, TxCarrierErrors, TxFifoErrors, TxHeartbeatErrors, TxWindowErrors as well as other errors.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.RxDropped">
            <summary>
            Number of packets received but not processed. 
            For hardware interfaces this counter may include packets discarded due to Data Link Layer (L2) address filtering, but not packets dropped by the device due to buffer exhaustion which are counted separately in RxMissedErrors.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.TxDropped">
            <summary>
            Number of packets dropped before they could be transmitted.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.Multicast">
            <summary>
            Number of multicast packets received. 
            For hardware interfaces this counter is typically computed at the device level and therefore may include packets which never reached the host.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.Collisions">
            <summary>
            Number of collisions during packet transmission.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.RxLengthErrors">
            <summary>
            Number of packets dropped due to invalid length. 
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.RxOverErrors">
            <summary>
            Receiver buffer overflow event counter.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.RxCrcErrors">
            <summary>
            Number of packets received with a CRC error.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.RxFrameErrors">
            <summary>
            Receiver frame alignment errors. 
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.RxFifoErrors">
            <summary>
            Receiver FIFO error counter.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.RxMissedErrors">
            <summary>
            Number of packets missed by the host. 
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.TxAbortedErrors">
            <summary>
            A general device discard counter.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.TxCarrierErrors">
            <summary>
            Number of errors during frame transmission due to loss of the carrier during the operation.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.TxFifoErrors">
            <summary>
            Number of frame transmission errors due to device FIFO underflow. 
            This means that the transmission event was started, but the device was unable to deliver the entire frame to the transmitter before timing out.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.TxHeartbeatErrors">
            <summary>
            Number of Heartbeat (SQE Test) errors on older half-duplex Ethernet.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.TxWindowErrors">
            <summary>
            Number of frame transmission errors due to "late" collisions.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.RxCompressed">
            <summary>
            Number of correctly received compressed packets.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.TxCompressed">
            <summary>
            Number of transmitted compressed packets. 
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.RxNoHandler">
            <summary>
            Number of packets received on the interface, but later dropped by the networking stack because the device is not designated to receive packets.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.FromBytes(System.Byte[])">
            <summary>
            Converts a raw byte array into a InterfaceLinkStatistics instance.
            </summary>
            <param name="data">Raw Byte Array.</param>
            <returns>InterfaceLinkStatistics instance</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics.ToString">
            <summary>
            Returns a string representation of the current InterfaceLinkStatistics instance.
            </summary>
            <returns>String representation of this InterfaceLinkStatistics instance.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64">
            <summary>
            Interface Link Statistics with 64 bit length parameters.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.RxPackets">
            <summary>
            Number of good packets received by the interface. 
            For hardware interfaces, this count includes all good packets received from the device by the host and includes packets which the host had to drop at various stages of processing.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.TxPackets">
            <summary>
            Number of packets successfully transmitted. 
            For hardware interfaces, this count includes packets which the host was able to successfully hand over to the device, but this does not necessarily mean that packets were successfully transmitted out of the device and only that the device acknowledged it copied them out of host memory.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.RxBytes">
            <summary>
            Number of good received bytes, corresponding to RxPackets.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.TxBytes">
            <summary>
            Number of good transmitted bytes, corresponding to TxPackets.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.RxErrors">
            <summary>
            Total number of bad packets received on this network device. 
            This counter includes events counted by RxLengthErrors, RxCrcErrors, RxFrameErrors as well as other errors.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.TxErrors">
            <summary>
            Total number of transmit errors. 
            This counter includes events counted by TxAbortedErrors, TxCarrierErrors, TxFifoErrors, TxHeartbeatErrors, TxWindowErrors as well as other errors.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.RxDropped">
            <summary>
            Number of packets received but not processed. 
            For hardware interfaces this counter may include packets discarded due to Data Link Layer (L2) address filtering, but not packets dropped by the device due to buffer exhaustion which are counted separately in RxMissedErrors.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.TxDropped">
            <summary>
            Number of packets dropped before they could be transmitted.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.Multicast">
            <summary>
            Number of multicast packets received. 
            For hardware interfaces this counter is typically computed at the device level and therefore may include packets which never reached the host.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.Collisions">
            <summary>
            Number of collisions during packet transmission.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.RxLengthErrors">
            <summary>
            Number of packets dropped due to invalid length. 
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.RxOverErrors">
            <summary>
            Receiver buffer overflow event counter.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.RxCrcErrors">
            <summary>
            Number of packets received with a CRC error.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.RxFrameErrors">
            <summary>
            Receiver frame alignment errors. 
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.RxFifoErrors">
            <summary>
            Receiver FIFO error counter.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.RxMissedErrors">
            <summary>
            Number of packets missed by the host. 
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.TxAbortedErrors">
            <summary>
            A general device discard counter.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.TxCarrierErrors">
            <summary>
            Number of errors during frame transmission due to loss of the carrier during the operation.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.TxFifoErrors">
            <summary>
            Number of frame transmission errors due to device FIFO underflow. 
            This means that the transmission event was started, but the device was unable to deliver the entire frame to the transmitter before timing out.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.TxHeartbeatErrors">
            <summary>
            Number of Heartbeat (SQE Test) errors on older half-duplex Ethernet.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.TxWindowErrors">
            <summary>
            Number of frame transmission errors due to "late" collisions.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.RxCompressed">
            <summary>
            Number of correctly received compressed packets.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.TxCompressed">
            <summary>
            Number of transmitted compressed packets. 
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.RxNoHandler">
            <summary>
            Number of packets received on the interface, but later dropped by the networking stack because the device is not designated to receive packets.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.RxOtherHostDropped">
            <summary>
            Number of packets dropped due to destination MAC address mismatch.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.FromBytes(System.Byte[])">
            <summary>
            Converts a raw byte array into a InterfaceLinkStatistics64 instance.
            </summary>
            <param name="data">Raw Byte Array.</param>
            <returns>InterfaceLinkStatistics64 instance</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.InterfaceLinkStatistics64.ToString">
            <summary>
            Returns a string representation of the current InterfaceLinkStatistics64 instance.
            </summary>
            <returns>String representation of this InterfaceLinkStatistics64 instance.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.InterfaceMap">
            <summary>
            Interface Map for setting hardware parameters.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceMap.MemoryStart">
            <summary>
            Memory Address Start.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceMap.MemoryEnd">
            <summary>
            Memory Address End.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceMap.BaseAddress">
            <summary>
            Memory Address Base.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceMap.IRQ">
            <summary>
            Interrupt Request.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceMap.DMA">
            <summary>
            Direct Memory Access.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.InterfaceMap.Port">
            <summary>
            Port.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.InterfaceMap.FromBytes(System.Byte[])">
            <summary>
            Converts a raw byte array into a InterfaceMap instance.
            </summary>
            <param name="data">Raw Byte Array.</param>
            <returns>InterfaceMap instance</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.InterfaceMap.ToString">
            <summary>
            Returns a string representation of the current InterfaceMap instance.
            </summary>
            <returns>String representation of this InterfaceMap instance.</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.LinkInfoAttribute">
            <summary>
            Link Information Attrbute.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.LinkInfoAttribute.Type">
            <summary>
            Link Information Attribute Type.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.LinkInfoAttribute.Data">
            <summary>
            Raw Attribute Data.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.LinkInfoAttribute.#ctor(System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the LinkInfoAttribute class with the specified type and raw unconverted data.
            </summary>
            <param name="type">Attribute Type</param>
            <param name="data">Raw Unconverted Data</param>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.NetlinkConstants">
            <summary>
            Set of Netlink constants
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkConstants.AF_NETLINK">
            <summary>
            Address Family Netlink.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkConstants.PF_NETLINK">
            <summary>
            Protocol Family Netlink.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.NetlinkMessageError">
            <summary>
            Represents a Netlink Message Error.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.NetlinkMessageError.MessageHeader">
            <summary>
            Netlink Message Header.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.NetlinkMessageError.Error">
            <summary>
            Error is set to negative errno or 0 for acknowledgements.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.NetlinkMessageError.ErrorMessageHeader">
            <summary>
            Message header which corresponds to the error code.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkMessageError.FromBytes(System.Byte[])">
            <summary>
            Converts raw byte array into NetlinkMessageError object.
            </summary>
            <param name="data">Raw Byte Array</param>
            <returns>NetlinkMessageHeader object</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.NetlinkMessageHeader">
            <summary>
            Represents a Netlink Message Header.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.NetlinkMessageHeader.MessageLength">
            <summary>
            Length of message including the header.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.NetlinkMessageHeader.MessageType">
            <summary>
            Message Type.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.NetlinkMessageHeader.Flags">
            <summary>
            Additional Flags.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.NetlinkMessageHeader.SequenceNumber">
            <summary>
            Sequence number.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.NetlinkMessageHeader.SenderPortId">
            <summary>
            Sender port ID.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkMessageHeader.FromBytes(System.Byte[])">
            <summary>
            Converts raw byte array into NetlinkMessageHeader object.
            </summary>
            <param name="data">Raw Byte Array</param>
            <returns>NetlinkMessageHeader object</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.NetlinkMessageMacros">
            <summary>
            Macros used to create and access Netlink Messages. 
            The buffer passed to and from a Netlink socket should only be accessed via these macros.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageMacros.NLMSG_ALIGNTO">
            <summary>
            Alignment value for all Netlink message headers, payloads, attributes, etc.
            </summary>
        </member>
        <member name="F:SocketCANSharp.Network.Netlink.NetlinkMessageMacros.RTA_ALIGNTO">
            <summary>
            Alignment value for all Routing Attributes.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.NetlinkMessageMacros.NLMSG_HDRLEN">
            <summary>
            Gets the Netlink message header length.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkMessageMacros.NLMSG_OK(SocketCANSharp.Network.Netlink.NetlinkMessageHeader,System.Int32)">
            <summary>
            Returns true if the Netlink message is not truncated and is in a form suitable for parsing. 
            </summary>
            <param name="nlh">Netlink Message Header.</param>
            <param name="len">Number of bytes read from socket.</param>
            <returns>True, if message is OK for parsing. Otherwise, false.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkMessageMacros.NLMSG_ALIGN(System.Int32)">
            <summary>
            Round the length of a Netlink message up to align it properly. 
            </summary>
            <param name="len">Length of a Netlink message.</param>
            <returns>Rounded up / aligned message length value.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkMessageMacros.NLMSG_LENGTH(System.Int32)">
            <summary>
            Given the payload length returns the aligned length to store in the Netlink message length field of the header.
            </summary>
            <param name="len">Payload length</param>
            <returns>The aligned length to store in the Netlink message length field of the header.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkMessageMacros.NLMSG_SPACE(System.Int32)">
            <summary>
            Return the number of bytes that a Netlink message with a payload of the specified length would occupy. 
            </summary>
            <param name="len">Payload length value</param>
            <returns>The number of bytes that a Netlink message with a data payload of the provided length occupies.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkMessageMacros.NLMSG_PAYLOAD(SocketCANSharp.Network.Netlink.NetlinkMessageHeader,System.Int32)">
            <summary>
            Return the length of the payload associated with the Netlink message header. 
            </summary>
            <param name="nlh">Netlink Message Header</param>
            <param name="len">Payload Length</param>
            <returns>The length of the Netlink message payload associated with the header.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkMessageMacros.RTA_OK(SocketCANSharp.Network.Netlink.RoutingAttribute,System.Int32)">
            <summary>
            Returns true if the Routing Attribute is valid.
            </summary>
            <param name="rta">Routing Attribute.</param>
            <param name="len">Running length of the attribute buffer.</param>
            <returns>True, if the Routing Attribute is valid. Otherwise, false.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkMessageMacros.RTA_ALIGN(System.Int32)">
            <summary>
            Round the length of a Routing Attribute to align it properly.
            </summary>
            <param name="len">Length of a Routing Attribute.</param>
            <returns>Round up / aligned Routine Attribute length.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkMessageMacros.RTA_LENGTH(System.Int32)">
            <summary>
            Gets the length which is required for the specified length in bytes of data plus the header.
            </summary>
            <param name="len">Length in bytes of data</param>
            <returns>Required length</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkMessageMacros.RTA_PAYLOAD(SocketCANSharp.Network.Netlink.RoutingAttribute)">
            <summary>
            Gets the length of this routing attribute's data.
            </summary>
            <param name="rta">Routing Attribute</param>
            <returns>Length of this routing attribute's data</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.NetlinkNativeMethods">
            <summary>
            Netlink Native Methods
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkNativeMethods.Socket(System.Int32,System.Net.Sockets.SocketType,SocketCANSharp.Network.Netlink.NetlinkProtocolType)">
            <summary>
            Creates a Netlink socket.
            </summary>
            <param name="addressFamily">Address Family</param>
            <param name="socketType">Type of socket</param>
            <param name="protocolType">Netlink Protocol Type</param>
            <returns>Socket Handle Wrapper Instance</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkNativeMethods.Bind(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.Network.Netlink.SockAddrNetlink,System.Int32)">
            <summary>
            Assigns the specified Netlink address to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrapper Instance</param>
            <param name="addr">Netlink address structure</param>
            <param name="addrSize">Size of address structure</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkNativeMethods.GetSockName(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.Network.Netlink.SockAddrNetlink,System.Int32@)">
            <summary>
            Returns the current address to which the socket is bound to.
            </summary>
            <param name="socketHandle">Socket handle</param>
            <param name="sockAddr">Address structure</param>
            <param name="sockAddrLen">The size of the the socket address structure in bytes</param>
            <returns>0 on success, -1 on error</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkNativeMethods.Write(SocketCANSharp.SafeFileDescriptorHandle,SocketCANSharp.Network.Netlink.NetworkInterfaceInfoRequest,System.Int32)">
            <summary>
            Write the Network Interface Information Request to the socket.
            </summary>
            <param name="socketHandle">Socket Handle Wrappper Instance</param>
            <param name="req">Network Interface Information Request to write</param>
            <param name="reqSize">Size of Network Interface Information Request in bytes</param>
            <returns>The number of bytes written on success, -1 on error</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.NetlinkUtils">
            <summary>
            Netlink Utilities.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkUtils.ParseInterfaceLinkAttributes(System.Byte[],System.Int32@)">
            <summary>
            Parse Interface Link Attributes (IFLA).
            </summary>
            <param name="rxBuffer">Receive Buffer</param>
            <param name="offset">Offset into buffer</param>
            <returns>Interface Link Attribute Collection</returns>
            <exception cref="T:System.ArgumentNullException">Receive Buffer is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Offset is negative</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkUtils.ParseNestedLinkInfoAttributes(System.Byte[])">
            <summary>
            Parse Nested Link Info Attributes.
            </summary>
            <param name="rxBuffer">Receive Buffer</param>
            <returns>Nested Link Info Attributes Collection</returns>
            <exception cref="T:System.ArgumentNullException">Receive Buffer is null</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkUtils.ParseNestedCanRoutingAttributes(System.Byte[])">
            <summary>
            Parse Nested CAN Routing Attributes.
            </summary>
            <param name="rxBuffer">Receive Buffer</param>
            <returns>Nested CAN Routing Attributes Collection</returns>
            <exception cref="T:System.ArgumentNullException">Receive Buffer is null</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkUtils.FromBytes``1(System.Byte[])">
            <summary>
            Converts a raw byte array into a newly allocated managed object of the type specified by the generic type parameter.
            </summary>
            <typeparam name="T">Netlink Object Type</typeparam>
            <param name="data">Raw byte array</param>
            <returns>A managed object that contains the data corresponding to the byte array.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkUtils.ToBytes``1(``0)">
            <summary>
            Converts a managed object of the type specified by the generic type parameter into a raw byte array.
            </summary>
            <typeparam name="T">Object Type</typeparam>
            <param name="obj">Managed Object Instance</param>
            <returns>A raw byte array that corresponds to the managed object instance.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkUtils.FindInterfaceInfoMessage(System.Int32,System.Byte[])">
            <summary>
            Retrieves the requested Interface Information Message.
            </summary>
            <param name="interfaceIndex">Interface Index</param>
            <param name="rxBuffer">Receive Buffer</param>
            <returns>Requested Interface Information Message, if found; otherwise, null.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkUtils.FindNestedCanRoutingAttribute(System.Int32,System.Byte[],SocketCANSharp.Network.Netlink.CanRoutingAttributeType)">
            <summary>
            Retrieves the requested CAN Routing Attribute.
            </summary>
            <param name="interfaceIndex">Interface Index</param>
            <param name="rxBuffer">Receive Buffer</param>
            <param name="type">Requested CAN Routing Attribute</param>
            <returns>Requested CAN Routing Attribute, if found; otherwise, null.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkUtils.FindNestedLinkInfoAttribute(System.Int32,System.Byte[],SocketCANSharp.Network.Netlink.LinkInfoAttributeType)">
            <summary>
            Retrieves the requested Link Information Attribute.
            </summary>
            <param name="interfaceIndex">Interface Index</param>
            <param name="rxBuffer">Receive Buffer</param>
            <param name="type">Requested Link Information Attribute</param>
            <returns>Requested Link Information Attribute, if found; otherwise, null.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkUtils.FindInterfaceLinkAttribute(System.Int32,System.Byte[],SocketCANSharp.Network.Netlink.InterfaceLinkAttributeType)">
            <summary>
            Retrieves the requested Interface Link Attribute.
            </summary>
            <param name="interfaceIndex">Interface Index</param>
            <param name="rxBuffer">Receive Buffer</param>
            <param name="type">Requested Interface Link Attribute</param>
            <returns>Requested Interface Link Attribute, if found; otherwise, null.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkUtils.GenerateRequestForLinkInfoByIndex(System.Int32)">
            <summary>
            Generates a Network Interface Information Request Message for the Interface specified by the Index number.
            </summary>
            <param name="index">Interface Index</param>
            <returns>Network Interface Request Message for the Interface specified by the Index number.</returns>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.NetlinkUtils.PeekAtHeader(System.Byte[])">
            <summary>
            Peeks at the header using the provided buffer.
            </summary>
            <param name="buffer">Byte array which contains a Netlink message.</param>
            <returns>Netlink Message Header object extracted from the buffer.</returns>
            <exception cref="T:System.ArgumentNullException">Provided buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Provided buffer is too small.</exception>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.NetworkInterfaceInfoRequest">
            <summary>
            Network Interface Information Request.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.NetworkInterfaceInfoRequest.Header">
            <summary>
            Message Header.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.NetworkInterfaceInfoRequest.Information">
            <summary>
            Interface Information.
            </summary>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.RoutingAttribute">
            <summary>
            Represents a Netlink Routing Attribute.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.RoutingAttribute.Length">
            <summary>
            Length of Route Option.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.RoutingAttribute.Type">
            <summary>
            Type of Route Option.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.RoutingAttribute.FromBytes(System.Byte[])">
            <summary>
            Converts a raw byte array into a RoutingAttribute instance.
            </summary>
            <param name="data">Raw Byte Array.</param>
            <returns>RoutingAttribute instance</returns>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.RoutingNetlinkSocket">
            <summary>
            Provides Routing Netlink (rtnetlink) socket services.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.RoutingNetlinkSocket.#ctor">
            <summary>
            Initializes a new instance of the RoutingNetlinkSocket class.
            </summary>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to create the requested socket.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.RoutingNetlinkSocket.Write(SocketCANSharp.Network.Netlink.NetworkInterfaceInfoRequest)">
            <summary>
            Writes the supplied Network Interface Information request to the socket.
            </summary>
            <param name="request">Network Interface Information to transmit.</param>
            <returns>Number of bytes written to the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Writing to the underlying NETLINK_ROUTE socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.RoutingNetlinkSocket.Read(System.Byte[])">
            <summary>
            Reads data from the socket into the supplied receive buffer.
            </summary>
            <param name="data">An array of bytes that is the receive buffer</param>
            <returns>The number of bytes received from the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">The data byte array is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Reading from the underlying NETLINK_ROUTE socket failed.</exception>
        </member>
        <member name="T:SocketCANSharp.Network.Netlink.SockAddrNetlink">
            <summary>
            Represents a Netlink address structure.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.SockAddrNetlink.NetlinkFamily">
            <summary>
            Address Family.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.SockAddrNetlink.Pad">
            <summary>
            Zero. Pad Byte.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.SockAddrNetlink.PortId">
            <summary>
            Port ID. Must be unique per Netlink socket as it is the unicast address of the socket. 
            Set before the call to bind to allow the userspace application to set a unique identifier for the socket, otherwise leave as zero and the kernel will take care of assigning a unique identifier.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.Netlink.SockAddrNetlink.GroupsMask">
            <summary>
            Multicast groups mask. It is a bitmask with every bit representing a Netlink group number.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.SockAddrNetlink.#ctor">
            <summary>
            Initializes a Netlink address structure with default values of zeroes.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.Netlink.SockAddrNetlink.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a Netlink address structure to the AF_NETLINK address family with the provided Port ID and Multicast Groups Mask.
            </summary>
            <param name="portId">Port ID</param>
            <param name="groupsMask">Multicast groups mask</param>
        </member>
        <member name="T:SocketCANSharp.Network.RawCanSocket">
            <summary>
            Provides raw CAN socket services.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.RawCanSocket.Address">
            <summary>
            The current address to which this socket is bound.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.RawCanSocket.CanFilters">
            <summary>
            CAN Filters to control the reception of CAN frames.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.RawCanSocket.ErrorFilters">
            <summary>
            Error Mask to filter which Error Message Frames are passed to the socket receive queue.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.RawCanSocket.LocalLoopback">
            <summary>
            Local loopback to receive messages sent from other sockets on this CAN node.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.RawCanSocket.ReceiveOwnMessages">
            <summary>
            Enables a socket to receive the messages that it sent itself.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.RawCanSocket.EnableCanFdFrames">
            <summary>
            Allows the socket to handle CAN FD frames.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.RawCanSocket.EnableCanXlFrames">
            <summary>
            Allows the socket to handle CAN XL frames.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.RawCanSocket.AllCanFiltersMustMatch">
            <summary>
            If true, then all CAN filters must match (logical AND) for a CAN frame to be placed into the receive queue. If false, then if any CAN filter matches (logical OR) then a CAN frame will be placed into the receive queue. 
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.RawCanSocket.#ctor">
            <summary>
            Initializes a new instance of the RawCanSocket class.
            </summary>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to create the requested socket.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.RawCanSocket.Bind(SocketCANSharp.SockAddrCan)">
            <summary>
            Assigns the SocketCAN Base Address Structure to the CAN_RAW socket.
            </summary>
            <param name="addr">SocketCAN Base Address Structure.</param>
            <exception cref="T:System.ObjectDisposedException">The CAN_RAW socket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">SocketCAN Base Address Structure is null.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Unable to assign the provided SocketCAN Base Address Structure to the CAN_RAW socket.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.RawCanSocket.Bind(SocketCANSharp.Network.CanNetworkInterface)">
            <summary>
            Assigns the CAN Network Interface Index to the CAN_RAW socket.
            </summary>
            <param name="iface">CAN Network Interface instance containing the name and index of the interface.</param>
            <exception cref="T:System.ArgumentNullException">CanNetworkInterface instance is null.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.RawCanSocket.Write(SocketCANSharp.CanFrame)">
            <summary>
            Writes the supplied Classical CAN Frame to the socket.
            </summary>
            <param name="canFrame">Classical CAN Frame to transmit onto the CAN network.</param>
            <returns>Number of bytes written to the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Writing to the underlying CAN_RAW socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.RawCanSocket.Write(SocketCANSharp.CanFdFrame)">
            <summary>
            Writes the supplied CAN FD Frame to the socket.
            </summary>
            <param name="canFdFrame">CAN FD Frame to transmit onto the CAN network.</param>
            <returns>Number of bytes written to the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Writing to the underlying CAN_RAW socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.RawCanSocket.Write(SocketCANSharp.CanXlFrame)">
            <summary>
            Writes the supplied CAN XL Frame to the socket.
            </summary>
            <param name="canXlFrame">CAN XL Frame to transmit onto the CAN network.</param>
            <returns>Number of bytes written to the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Writing to the underlying CAN_RAW socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.RawCanSocket.Read(SocketCANSharp.CanFrame@)">
            <summary>
            Reads a Classical CAN Frame from the socket.
            </summary>
            <param name="canFrame">Classical CAN Frame to receive from the CAN network.</param>
            <returns>Number of bytes read from the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Reading from the underlying CAN_RAW socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.RawCanSocket.Read(SocketCANSharp.CanFrame@,System.Boolean@,System.Boolean@)">
            <summary>
            Reads a Classical CAN Frame from the socket.
            </summary>
            <param name="canFrame">Classical CAN Frame to receive from the CAN network.</param>
            <param name="txSuccess">Indicates whether the previous transmission attempt was successful or not.</param>
            <param name="localhost">Indicates whether the received CAN frame was generated on the localhost or not.</param>
            <returns>Number of bytes read from the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Reading from the underlying CAN_RAW socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.RawCanSocket.Read(SocketCANSharp.CanFdFrame@,System.Boolean@,System.Boolean@)">
            <summary>
            Reads a CAN FD Frame from the socket.
            </summary>
            <param name="canFdFrame">CAN FD Frame to receive from the CAN network.</param>
            <param name="txSuccess">Indicates whether the previous transmission attempt was successful or not.</param>
            <param name="localhost">Indicates whether the received CAN FD frame was generated on the localhost or not.</param>
            <returns>Number of bytes read from the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Reading from the underlying CAN_RAW socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.RawCanSocket.Read(SocketCANSharp.CanFdFrame@)">
            <summary>
            Reads a CAN FD Frame from the socket. ** Note: Check the number of bytes read to determine if frame is Classic CAN (16) of CAN FD (72). **
            </summary>
            <param name="canFdFrame">CAN FD Frame to receive from the CAN network.</param>
            <returns>Number of bytes read from the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Reading from the underlying CAN_RAW socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.RawCanSocket.Read(SocketCANSharp.CanXlFrame@,System.Boolean@,System.Boolean@)">
            <summary>
            Reads a CAN XL Frame from the socket.
            </summary>
            <param name="canXlFrame">CAN XL Frame to receive from the CAN network.</param>
            <param name="txSuccess">Indicates whether the previous transmission attempt was successful or not.</param>
            <param name="localhost">Indicates whether the received CAN XL frame was generated on the localhost or not.</param>
            <returns>Number of bytes read from the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Reading from the underlying CAN_RAW socket failed.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.RawCanSocket.Read(SocketCANSharp.CanXlFrame@)">
            <summary>
            Reads a CAN XL Frame from the socket.
            </summary>
            <param name="canXlFrame">CAN XL Frame to receive from the CAN network.</param>
            <returns>Number of bytes read from the socket.</returns>
            <exception cref="T:System.ObjectDisposedException">The socket has been closed.</exception>
            <exception cref="T:SocketCANSharp.Network.SocketCanException">Reading from the underlying CAN_RAW socket failed.</exception>
        </member>
        <member name="T:SocketCANSharp.Network.SocketCanException">
            <summary>
            The exception that is thrown when a SocketCAN error occurs.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Network.SocketCanException.Description">
            <summary>
            Description of the error.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.SocketCanException.#ctor">
            <summary>
            Initializes a new instance of the SocketCanException class with the last operating system error code.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Network.SocketCanException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SocketCanException class with the last operating system error code along with a description.
            </summary>
            <param name="description">Describes the event where the exception occurred.</param>
            <exception cref="T:System.ArgumentNullException">The description specified is null.</exception>
        </member>
        <member name="M:SocketCANSharp.Network.SocketCanException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the SocketCanException class with the specified error code.
            </summary>
            <param name="errorCode">The error code that indicates that error the occurred.</param>
        </member>
        <member name="M:SocketCANSharp.Network.SocketCanException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the SocketCanException class with the specified error code along with a description.
            </summary>
            <param name="errorCode">The error code that indicates that error the occurred.</param>
            <param name="description">Describes the event where the exception occurred.</param>
            <exception cref="T:System.ArgumentNullException">The description specified is null.</exception>
        </member>
        <member name="T:SocketCANSharp.J1939.J1939MessageType">
            <summary>
            SAE J1939 Message Type.
            </summary>
        </member>
        <member name="F:SocketCANSharp.J1939.J1939MessageType.PDU1">
            <summary>
            Addressable Message that is targeted at a particular device.
            </summary>
        </member>
        <member name="F:SocketCANSharp.J1939.J1939MessageType.PDU2">
            <summary>
            Broadcast Message that is sent to a group of devices.
            </summary>
        </member>
        <member name="T:SocketCANSharp.J1939.J1939CanIdentifier">
            <summary>
            SAE J1939 CAN ID.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939CanIdentifier.SourceAddress">
            <summary>
            The address of the device which transmitted the message.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939CanIdentifier.ParameterGroupNumber">
            <summary>
            The Parameter Group Number of the message.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939CanIdentifier.Priority">
            <summary>
            The priority of the message during the arbitration process. Value of 0 is the highest priority and 7 is the lowest priority. 
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939CanIdentifier.RawValue">
            <summary>
            Gets the raw value of the CAN ID based on the configured properties of the current object.
            </summary>
        </member>
        <member name="M:SocketCANSharp.J1939.J1939CanIdentifier.#ctor">
            <summary>
            Initializes a new instance of the J1939CanIdentifier class.
            </summary>
        </member>
        <member name="M:SocketCANSharp.J1939.J1939CanIdentifier.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the J1939CanIdentifier class using the raw CAN ID.
            </summary>
            <param name="rawCanId">Raw CAN ID</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Raw CAN ID exceeds 29-bit in length.</exception>
        </member>
        <member name="T:SocketCANSharp.J1939.J1939Name">
            <summary>
            SAE J1939 Name.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939Name.IdentityNumber">
            <summary>
            Set by the manufacturer. Much like a serial number, but be unique per unit.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939Name.ManufacturerCode">
            <summary>
            Code assigned by the SAE to identify the device manufacturer.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939Name.EcuInstance">
            <summary>
            Used to accommodate situations where several ECUs compose a single functionality. This code is what separates them.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939Name.FunctionInstance">
            <summary>
            Identifies the instance of the function (i.e., TCM #1). 
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939Name.Function">
            <summary>
            Code which identifies the function according to the Industry Group (i.e., TCM).
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939Name.Reserved">
            <summary>
            Reserved and should always be set to zero.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939Name.VehicleSystem">
            <summary>
            Identifies the vehicle system associated with the Industry Group (i.e. Trailer).
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939Name.VehicleSystemInstance">
            <summary>
            Identifies a particular occurrence of a vehicle system (i.e., Trailer #2).
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939Name.IndustryGroup">
            <summary>
            Code associated with a particular industry (i.e., On-Highway)
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939Name.ArbitraryAddressCapable">
            <summary>
            Indicates whether or not the ECU can negotiate an address. 
            Some ECUs only support a single address while others support a range of addresses.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.J1939Name.RawValue">
            <summary>
            Gets the raw value of the J1939 Name based on the configured properties of the current object.
            </summary>
        </member>
        <member name="M:SocketCANSharp.J1939.J1939Name.#ctor">
            <summary>
            Initializes a new instance of the J1939Name class.
            </summary>
        </member>
        <member name="M:SocketCANSharp.J1939.J1939Name.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the J1939Name class using the raw 64-bit NAME value.
            </summary>
            <param name="name">Raw NAME value</param>
        </member>
        <member name="T:SocketCANSharp.J1939.ParameterGroupNumber">
            <summary>
            SAE J1939 Parameter Group Number.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.ParameterGroupNumber.Reserved">
            <summary>
            Single bit which is reserved for future use. Should be set to 0 for transmitted messages.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.ParameterGroupNumber.DataPage">
            <summary>
            Single bit which is the data page selector and expands the number of possible Parameter Groups that can be represented.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.ParameterGroupNumber.PduFormat">
            <summary>
            If the PDU Format is between 0x00 and 0xEF then the message type is PDU1 (Addressable Message) and PDU Specific field contains the destination address.
            If the PDU Format is between 0xF0 and 0xFF then the message type is PDU2 (Broadcast Message) and PDU Specific field contains a Group Extension.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.ParameterGroupNumber.PduSpecific">
            <summary>
            PDU Specific field is either the destination address or a Group Extension depending of the PDU Format (PDU1 versus PDU2).
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.ParameterGroupNumber.MessageType">
            <summary>
            J1939 Message Type derived from the PDU Format value.
            </summary>
        </member>
        <member name="P:SocketCANSharp.J1939.ParameterGroupNumber.RawValue">
            <summary>
            Gets the raw value of the PGN based on the configured properties of the current object.
            </summary>
        </member>
        <member name="M:SocketCANSharp.J1939.ParameterGroupNumber.#ctor">
            <summary>
            Initializes a new instance of the ParameterGroupNumber class.
            </summary>
        </member>
        <member name="M:SocketCANSharp.J1939.ParameterGroupNumber.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the ParameterGroupNumber class using the raw PGN value.
            </summary>
            <param name="pgn">Raw Parameter Group Number</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Raw PGN value exceeds allowable limits</exception>
        </member>
        <member name="T:SocketCANSharp.SafeFileDescriptorHandle">
            <summary>
            Represents a wrapper class for a File Descriptor handle.
            </summary>
        </member>
        <member name="P:SocketCANSharp.SafeFileDescriptorHandle.IsInvalid">
            <summary>
            Gets a value that indicates whether the handle is invalid.
            </summary>
        </member>
        <member name="M:SocketCANSharp.SafeFileDescriptorHandle.ReleaseHandle">
            <summary>
            Frees the handle.
            </summary>
            <returns>True, if the handle is released successfully. False, otherwise.</returns>
        </member>
        <member name="T:SocketCANSharp.SockAddrCan">
            <summary>
            Represents a SocketCAN base address structure.
            </summary>
        </member>
        <member name="M:SocketCANSharp.SockAddrCan.#ctor">
            <summary>
            Initializes a SocketCAN base address structure with default values of zeroes.
            </summary>
        </member>
        <member name="M:SocketCANSharp.SockAddrCan.#ctor(System.Int32)">
            <summary>
            Initializes a SocketCAN base address structure to the AF_CAN address family and the provided interface index value.
            </summary>
            <param name="interfaceIndex">Interface index value</param>
        </member>
        <member name="M:SocketCANSharp.SockAddrCan.ToString">
            <summary>
            Returns a string that represents the current SockAddrCan object.
            </summary>
            <returns>A string that represents the current SockAddrCan object.</returns>
        </member>
        <member name="T:SocketCANSharp.SockAddrCanIsoTp">
            <summary>
            Represents a SocketCAN ISO-TP address structure.
            </summary>
        </member>
        <member name="P:SocketCANSharp.SockAddrCanIsoTp.RxId">
            <summary>
            CAN ID to receive on. Typically, CAN frames coming from the ECU will use this CAN ID (ex. 0x7e8).
            </summary>
        </member>
        <member name="P:SocketCANSharp.SockAddrCanIsoTp.TxId">
            <summary>
            CAN ID to transmit with. Typically, CAN frames being sent from the Tester will use this CAN ID (ex. 0x7e0).
            </summary>
        </member>
        <member name="M:SocketCANSharp.SockAddrCanIsoTp.#ctor">
            <summary>
            Initializes a SocketCAN ISO-TP address structure with default values of zeroes.
            </summary>
        </member>
        <member name="M:SocketCANSharp.SockAddrCanIsoTp.#ctor(System.Int32)">
            <summary>
            Initializes a SocketCAN ISO-TP address structure to the AF_CAN address family and the provided interface index value. 
            </summary>
            <param name="interfaceIndex">Interface index value</param>
        </member>
        <member name="M:SocketCANSharp.SockAddrCanIsoTp.ToString">
            <summary>
            Returns a string that represents the current SockAddrCanIsoTp object.
            </summary>
            <returns>A string that represents the current SockAddrCanIsoTp object.</returns>
        </member>
        <member name="T:SocketCANSharp.SockAddrCanJ1939">
            <summary>
            Represents a SocketCAN SAE J1939 address structure.
            </summary>
        </member>
        <member name="P:SocketCANSharp.SockAddrCanJ1939.Name">
            <summary>
            64-bit NAME belonging to a J1939 Node.
            </summary>
        </member>
        <member name="P:SocketCANSharp.SockAddrCanJ1939.PGN">
            <summary>
            Parameter Group Number (PGN) to use. Note that the PGN is part of the 29-bit CAN ID.
            </summary>
        </member>
        <member name="P:SocketCANSharp.SockAddrCanJ1939.Address">
            <summary>
            Address byte belonging to a J1939 Node.
            </summary>
        </member>
        <member name="M:SocketCANSharp.SockAddrCanJ1939.#ctor">
            <summary>
            Initializes a SocketCAN SAE J1939 address structure with default values of zeroes.
            </summary>
        </member>
        <member name="M:SocketCANSharp.SockAddrCanJ1939.#ctor(System.Int32)">
            <summary>
            Initializes a SocketCAN SAE J1939 address structure to the AF_CAN address family and the provided interface index value. 
            </summary>
            <param name="interfaceIndex">Interface index value</param>
        </member>
        <member name="M:SocketCANSharp.SockAddrCanJ1939.ToString">
            <summary>
            Returns a string that represents the current SockAddrCanJ1939 object.
            </summary>
            <returns>A string that represents the current SockAddrCanJ1939 object.</returns>
        </member>
        <member name="T:SocketCANSharp.SocketCanConstants">
            <summary>
            Set of SocketCAN constants
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.AF_CAN">
            <summary>
            Address Family CAN
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.PF_CAN">
            <summary>
            Protocol Family CAN
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.SIOCGIFINDEX">
            <summary>
            Socket Configuration Control: name -> if_index mapping
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.SIOCGIFMTU">
            <summary>
            Socket Configuration Control: get MTU size
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.SIOCGIFNAME">
            <summary>
            Socket Configuration Control: get iface name
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.FIONBIO">
            <summary>
            Used to enable or disable non-blocking mode on a socket.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CAN_SFF_MASK">
            <summary>
            Valid bits in CAN ID in standard frame format (SFF).
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CAN_EFF_MASK">
            <summary>
            Valid bits in CAN ID in extended frame format (EFF).
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CAN_ERR_MASK">
            <summary>
            Used to omit EFF, RTR, ERR flags.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CANXL_PRIO_MASK">
            <summary>
            Mask used to retrieve the 11-bit Priority ID embedded in the priority field of the CAN XL Frame struct.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CANXL_VCID_MASK">
            <summary>
            Mask used to retrieve the 8-bit VCID embedded in the priority field of the CAN XL Frame struct.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CAN_INV_FILTER">
            <summary>
            Special flag to be set in the CAN ID of a CAN Filter to invert the CAN Filter.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CAN_RAW_FILTER_MAX">
            <summary>
            Maximum number of can_filters that can be set via setsockopt(). 
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CAN_MTU">
            <summary>
            Maximum Transmission Unit for Classic CAN.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CANFD_MTU">
            <summary>
            Maximum Transmission Unit for CAN FD.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CANXL_MTU">
            <summary>
            Maximum Transmission Unit for CAN XL.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CAN_MAX_DLEN">
            <summary>
            Maximum Data Payload for Classic CAN.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CANFD_MAX_DLEN">
            <summary>
            Maximum Data Payload for CAN FD.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CANXL_MAX_DLEN">
            <summary>
            Maximum Data Payload for CAN XL.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CanFdFrameLengths">
            <summary>
            Valid CAN FD Data Payloads.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.J1939_MAX_UNICAST_ADDR">
            <summary>
            J1939 Maximum Unicast Address.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.J1939_IDLE_ADDR">
            <summary>
            J1939 Idle Address.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.J1939_NO_ADDR">
            <summary>
            J1939 Broadcast or Null Address.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.J1939_NO_NAME">
            <summary>
            J1939 No Name Value.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.J1939_NO_PGN">
            <summary>
            J1939 No PGN Value.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.J1939_PGN_PDU1_MAX">
            <summary>
            J1939 PGN PDU1 (Peer-to-Peer) Maximum Value
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.J1939_PGN_MAX">
            <summary>
            J1939 PGN Maximum Value (Limit).
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.IF_NAMESIZE">
            <summary>
            Interface Name Buffer Size.
            </summary>
        </member>
        <member name="F:SocketCANSharp.SocketCanConstants.CANXL_VCID_OFFSET">
            <summary>
            Bit Offset of the VCID in the priority field of the CAN XL Frame struct
            </summary>
        </member>
        <member name="T:SocketCANSharp.SocketCanUtils">
            <summary>
            Set of SocketCAN utility functions.
            </summary>
        </member>
        <member name="P:SocketCANSharp.SocketCanUtils.CanXlHeaderSize">
            <summary>
            Returns CAN XL Header Size.
            </summary>
        </member>
        <member name="M:SocketCANSharp.SocketCanUtils.ThrowIfCanIdStructureInvalid(System.UInt32)">
            <summary>
            Validates the SocketCAN CAN Identifier structure.
            </summary>
            <param name="canId">CAN Identifier structure</param>
            <exception cref="T:System.ArgumentException">CAN_EFF_FLAG not set on a CAN ID that exceeds 11 bits.</exception>
        </member>
        <member name="M:SocketCANSharp.SocketCanUtils.CanFdLengthToDlc(System.Byte)">
            <summary>
            CAN FD data length to Data Length Code (DLC).
            </summary>
            <param name="length">CAN FD data length</param>
            <returns>Data Length Code (DLC) corresponding to the CAN FD data length</returns>
        </member>
        <member name="M:SocketCANSharp.SocketCanUtils.CanFdDlcToLength(System.Byte)">
            <summary>
            CAN FD Data Length Code (DLC) to CAN data length.
            </summary>
            <param name="dlc">CAN FD Data Length Code (DLC)</param>
            <returns>CAN data length corresponding to the CAN FD Data Length Code (DLC)</returns>
        </member>
        <member name="M:SocketCANSharp.SocketCanUtils.CanDlcToLength(System.Byte)">
            <summary>
            Classical CAN Data Length Code (DLC) to CAN data length.
            </summary>
            <param name="dlc">Classical CAN Data Length Code (DLC)</param>
            <returns>CAN data length corresponding to the Classical Data Length Code (DLC)</returns>
        </member>
        <member name="M:SocketCANSharp.SocketCanUtils.ExtractRawCanId(System.UInt32)">
            <summary>
            Extracts the Raw CAN ID from a CAN ID that contains embedded flags.
            </summary>
            <param name="canIdWithFlags">CAN ID with embedded flags</param>
            <returns>Raw CAN ID value</returns>
        </member>
        <member name="M:SocketCANSharp.SocketCanUtils.CreateCanIdWithFlags(System.UInt32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates the CAN ID with embedded flags (EFF, RTR, ERR).
            </summary>
            <param name="rawCanId">Raw CAN ID</param>
            <param name="isEff">Is Extended Frame Format</param>
            <param name="isRtr">Is Remote Transmission Request</param>
            <param name="isErr">Is Error Frame</param>
            <returns>CAN ID with embedded flags (EFF, RTR, ERR)</returns>
            <exception cref="T:System.ArgumentException">Raw CAN ID exceeds 11 bits, but EFF is not set to true.</exception>
        </member>
        <member name="M:SocketCANSharp.SocketCanUtils.CreateCanIdWithFormatFlag(System.UInt32)">
            <summary>
            Configures the raw CAN ID with the Format Flag. This shortcut method assumes Standard Frame Format for CAN IDs that are 11-bit and under and Extended Frame Format for CAN IDs over 11-bit.
            Note: For fine-grain CAN ID configuration use <c>CreateCanIdWithFlags</c>.
            </summary>
            <param name="rawCanId">Raw CAN ID</param>
            <returns>CAN ID with embedded frame format flag set when appropriate</returns>
            <exception cref="T:System.ArgumentException">Raw CAN IDs cannot exceed size of 29-bit.</exception>
        </member>
        <member name="M:SocketCANSharp.SocketCanUtils.SetCanXlPriorityId(System.UInt32,System.UInt16)">
            <summary>
            Helper method to set the Priority ID sub-element on the provided Priority composite element.
            </summary>
            <param name="priority">Priority composite element</param>
            <param name="priorityId">11-bit Priority ID</param>
            <returns>Priority composite element with the 11-bit Priority ID set to the provided value.</returns>
            <exception cref="T:System.ArgumentException">Priority ID cannot exceed 11 bits.</exception>
        </member>
        <member name="M:SocketCANSharp.SocketCanUtils.GetCanXlPriorityId(System.UInt32)">
            <summary>
            Helper method to get the Priority ID sub-element from the provided Priority composite element.
            </summary>
            <param name="priority">Priority composite element</param>
            <returns>11-bit Priority ID from the Priority composite element.</returns>
        </member>
        <member name="M:SocketCANSharp.SocketCanUtils.SetCanXlVCID(System.UInt32,System.Byte)">
            <summary>
            Helper method to set the VCID sub-element on the provided Priority composite element.
            </summary>
            <param name="priority">Priority composite element</param>
            <param name="vcid">8-bit Virtual CAN network ID</param>
            <returns>Priority composite element with the 8-bit Virtual CAN network ID set to the provided value.</returns>
        </member>
        <member name="M:SocketCANSharp.SocketCanUtils.GetCanXlVCID(System.UInt32)">
            <summary>
            Helper method to get the VCID sub-element from the provided Priority composite element.
            </summary>
            <param name="priority">Priority composite element</param>
            <returns>8-bit Virtual CAN network ID from the Priority composite element.</returns>
        </member>
        <member name="T:SocketCANSharp.Timeval">
            <summary>
            Represents a time interval structure.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Timeval.Seconds">
            <summary>
            Number of seconds.
            </summary>
        </member>
        <member name="P:SocketCANSharp.Timeval.Microseconds">
            <summary>
            Number of microseconds. This value is used in combination with the Seconds property to represent the full interval of time.
            </summary>
        </member>
        <member name="M:SocketCANSharp.Timeval.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a time interval object with the specified seconds and microseconds.
            </summary>
            <param name="seconds">Number of seconds</param>
            <param name="microseconds">Number of microseconds</param>
        </member>
        <member name="M:SocketCANSharp.Timeval.ToString">
            <summary>
            Returns a string that represents the current Timeval object.
            </summary>
            <returns>A string that represents the current Timeval object.</returns>
        </member>
    </members>
</doc>
